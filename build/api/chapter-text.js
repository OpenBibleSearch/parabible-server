'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.chapterText = exports.ridlistText = undefined;

var _book_names = require('../../data/book_names.json');

var _book_names2 = _interopRequireDefault(_book_names);

var _termSearch = require('./term-search');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ridlistText = function ridlistText(ridlist, requestedTextsSet, db) {
	return new Promise(function (resolve, reject) {
		var ridlistResponse = {};
		var cursor = db.collection("verse_data").find({ rid: { $in: ridlist } });
		cursor.each(function (err, doc) {
			if (err) console.log("ERROR", err);
			if (doc != null) {
				ridlistResponse[doc["rid"]] = {};
				if (requestedTextsSet.has("wlc")) ridlistResponse[doc["rid"]]["wlc"] = doc["wlc"];
				if (requestedTextsSet.has("net")) ridlistResponse[doc["rid"]]["net"] = doc["net"];
				if (requestedTextsSet.has("lxx")) ridlistResponse[doc["rid"]]["lxx"] = doc["lxx"];
				if (requestedTextsSet.has("sbl")) ridlistResponse[doc["rid"]]["sbl"] = doc["sbl"];
			} else {
				resolve(ridlistResponse);
			}
		});
	});
};

var chapterText = function chapterText(params, db) {
	var ref = params.reference;

	var requestedTexts = new Set(params["texts"] || []);
	if (!requestedTexts.has("wlc") && !requestedTexts.has("net") && !requestedTexts.has("lxx") && !requestedTexts.has("sbl")) requestedTexts.add("net");

	var highlights = {};
	if (params.hasOwnProperty("search_terms")) {
		params.search_terms.forEach(function (st) {
			highlights[st.uid] = (0, _termSearch._wordsThatMatchQuery)(st.data, [ref.book], ref.chapter);
		});
	}

	var minv = _book_names2.default[ref.book] * 10000000 + ref.chapter * 1000;
	var maxv = _book_names2.default[ref.book] * 10000000 + (ref.chapter + 1) * 1000;
	return new Promise(function (resolve, reject) {
		ridlistText(Array.from({ length: maxv - minv }, function (v, k) {
			return k + minv;
		}), requestedTexts, db).then(function (texts) {
			var returnVal = {
				"reference": params.reference,
				"text": texts
			};
			if (Object.keys(highlights).length > 0) returnVal["highlights"] = highlights;
			resolve(returnVal);
		}).catch(function (err) {
			reject(err);
		});
	});
};
exports.ridlistText = ridlistText;
exports.chapterText = chapterText;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9hcGkvY2hhcHRlci10ZXh0LmpzIl0sIm5hbWVzIjpbInJpZGxpc3RUZXh0IiwicmlkbGlzdCIsInJlcXVlc3RlZFRleHRzU2V0IiwiZGIiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsInJpZGxpc3RSZXNwb25zZSIsImN1cnNvciIsImNvbGxlY3Rpb24iLCJmaW5kIiwicmlkIiwiJGluIiwiZWFjaCIsImVyciIsImRvYyIsImNvbnNvbGUiLCJsb2ciLCJoYXMiLCJjaGFwdGVyVGV4dCIsInBhcmFtcyIsInJlZiIsInJlZmVyZW5jZSIsInJlcXVlc3RlZFRleHRzIiwiU2V0IiwiYWRkIiwiaGlnaGxpZ2h0cyIsImhhc093blByb3BlcnR5Iiwic2VhcmNoX3Rlcm1zIiwiZm9yRWFjaCIsInN0IiwidWlkIiwiZGF0YSIsImJvb2siLCJjaGFwdGVyIiwibWludiIsIm1heHYiLCJBcnJheSIsImZyb20iLCJsZW5ndGgiLCJ2IiwiayIsInRoZW4iLCJ0ZXh0cyIsInJldHVyblZhbCIsIk9iamVjdCIsImtleXMiLCJjYXRjaCJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOzs7O0FBQ0E7Ozs7QUFFQSxJQUFNQSxjQUFjLFNBQWRBLFdBQWMsQ0FBQ0MsT0FBRCxFQUFVQyxpQkFBVixFQUE2QkMsRUFBN0IsRUFBb0M7QUFDdkQsUUFBTyxJQUFJQyxPQUFKLENBQVksVUFBQ0MsT0FBRCxFQUFVQyxNQUFWLEVBQXFCO0FBQ3ZDLE1BQUlDLGtCQUFrQixFQUF0QjtBQUNBLE1BQU1DLFNBQVNMLEdBQUdNLFVBQUgsQ0FBYyxZQUFkLEVBQTRCQyxJQUE1QixDQUFpQyxFQUFFQyxLQUFLLEVBQUVDLEtBQUtYLE9BQVAsRUFBUCxFQUFqQyxDQUFmO0FBQ0FPLFNBQU9LLElBQVAsQ0FBWSxVQUFDQyxHQUFELEVBQU1DLEdBQU4sRUFBYztBQUN6QixPQUFJRCxHQUFKLEVBQ0NFLFFBQVFDLEdBQVIsQ0FBWSxPQUFaLEVBQXFCSCxHQUFyQjtBQUNELE9B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V0EsRUFaTSxDQUFQO0FBYUEsQ0FsQ0Q7UUFtQ1NkLFcsR0FBQUEsVztRQUFhbUIsVyxHQUFBQSxXIiwiZmlsZSI6ImNoYXB0ZXItdGV4dC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBib29rX25hbWVzIGZyb20gJy4uLy4uL2RhdGEvYm9va19uYW1lcy5qc29uJ1xuaW1wb3J0IHsgX3dvcmRzVGhhdE1hdGNoUXVlcnkgfSBmcm9tICcuL3Rlcm0tc2VhcmNoJ1xuXG5jb25zdCByaWRsaXN0VGV4dCA9IChyaWRsaXN0LCByZXF1ZXN0ZWRUZXh0c1NldCwgZGIpID0+IHtcblx0cmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcblx0XHRsZXQgcmlkbGlzdFJlc3BvbnNlID0ge31cblx0XHRjb25zdCBjdXJzb3IgPSBkYi5jb2xsZWN0aW9uKFwidmVyc2VfZGF0YVwiKS5maW5kKHsgcmlkOiB7ICRpbjogcmlkbGlzdCB9IH0pXG5cdFx0Y3Vyc29yLmVhY2goKGVyciwgZG9jKSA9PiB7XG5cdFx0XHRpZiAoZXJyKVxuXHRcdFx0XHRjb25zb2xlLmxvZyhcIkVSUk9SXCIsIGVycilcblx0XHRcdGlmIChkb2MgIT0gbnVsbCkge1xuXHRcdFx0XHRyaWRsaXN0UmVzcG9uc2VbZG9jW1wicmlkXCJdXSA9IHt9XG5cdFx0XHRcdGlmIChyZXF1ZXN0ZWRUZXh0c1NldC5oYXMoXCJ3bGNcIikpXG5cdFx0XHRcdFx0cmlkbGlzdFJlc3BvbnNlW2RvY1tcInJpZFwiXV1bXCJ3bGNcIl0gPSBkb2NbXCJ3bGNcIl1cblx0XHRcdFx0aWYgKHJlcXVlc3RlZFRleHRzU2V0LmhhcyhcIm5ldFwiKSlcblx0XHRcdFx0XHRyaWRsaXN0UmVzcG9uc2VbZG9jW1wicmlkXCJdXVtcIm5ldFwiXSA9IGRvY1tcIm5ldFwiXVxuXHRcdFx0XHRpZiAocmVxdWVzdGVkVGV4dHNTZXQuaGFzKFwibHh4XCIpKVxuXHRcdFx0XHRcdHJpZGxpc3RSZXNwb25zZVtkb2NbXCJyaWRcIl1dW1wibHh4XCJdID0gZG9jW1wibHh4XCJdXG5cdFx0XHRcdGlmIChyZXF1ZXN0ZWRUZXh0c1NldC5oYXMoXCJzYmxcIikpXG5cdFx0XHRcdFx0cmlkbGlzdFJlc3BvbnNlW2RvY1tcInJpZFwiXV1bXCJzYmxcIl0gPSBkb2NbXCJzYmxcIl1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHJlc29sdmUocmlkbGlzdFJlc3BvbnNlKVxuXHRcdFx0fVxuXHRcdH0pXG5cdH0pXG59XG5cbmNvbnN0IGNoYXB0ZXJUZXh0ID0gKHBhcmFtcywgZGIpID0+IHtcblx0Y29uc3QgcmVmID0gcGFyYW1zLnJlZmVyZW5jZVxuXG5cdGxldCByZXF1ZXN0ZWRUZXh0cyA9IG5ldyBTZXQocGFyYW1zW1widGV4dHNcIl0gfHwgW10pXG5cdGlmICghcmVxdWVzdGVkVGV4dHMuaGFzKFwid2xjXCIpICYmIFxuXHRcdFx0IXJlcXVlc3RlZFRleHRzLmhhcyhcIm5ldFwiKSAmJiBcblx0XHRcdCFyZXF1ZXN0ZWRUZXh0cy5oYXMoXCJseHhcIikgJiYgXG5cdFx0XHQhcmVxdWVzdGVkVGV4dHMuaGFzKFwic2JsXCIpKVxuXHRcdHJlcXVlc3RlZFRleHRzLmFkZChcIm5ldFwiKVxuXG5cdGxldCBoaWdobGlnaHRzID0ge31cblx0aWYgKHBhcmFtcy5oYXNPd25Qcm9wZXJ0eShcInNlYXJjaF90ZXJtc1wiKSkge1xuXHRcdHBhcmFtcy5zZWFyY2hfdGVybXMuZm9yRWFjaChzdCA9PiB7XG5cdFx0XHRoaWdobGlnaHRzW3N0LnVpZF0gPSBfd29yZHNUaGF0TWF0Y2hRdWVyeShzdC5kYXRhLCBbcmVmLmJvb2tdLCByZWYuY2hhcHRlcilcblx0XHR9KVxuXHR9XG5cblxuXHRcblx0Y29uc3QgbWludiA9IGJvb2tfbmFtZXNbcmVmLmJvb2tdICogMTAwMDAwMDAgKyByZWYuY2hhcHRlciAqIDEwMDBcblx0Y29uc3QgbWF4diA9IGJvb2tfbmFtZXNbcmVmLmJvb2tdICogMTAwMDAwMDAgKyAocmVmLmNoYXB0ZXIrMSkgKiAxMDAwXG5cdHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG5cdFx0cmlkbGlzdFRleHQoQXJyYXkuZnJvbSh7bGVuZ3RoOiBtYXh2LW1pbnZ9LCAodiwgaykgPT4gayttaW52KSwgcmVxdWVzdGVkVGV4dHMsIGRiKS50aGVuKCh0ZXh0cykgPT4ge1xuXHRcdFx0Y29uc3QgcmV0dXJuVmFsID0ge1xuXHRcdFx0XHRcInJlZmVyZW5jZVwiOiBwYXJhbXMucmVmZXJlbmNlLFxuXHRcdFx0XHRcInRleHRcIjogdGV4dHNcblx0XHRcdH1cblx0XHRcdGlmIChPYmplY3Qua2V5cyhoaWdobGlnaHRzKS5sZW5ndGggPiAwKVxuXHRcdFx0XHRyZXR1cm5WYWxbXCJoaWdobGlnaHRzXCJdID0gaGlnaGxpZ2h0c1xuXHRcdFx0cmVzb2x2ZShyZXR1cm5WYWwpXG5cdFx0fSkuY2F0Y2goKGVycikgPT4ge1xuXHRcdFx0cmVqZWN0KGVycilcblx0XHR9KVxuXHR9KVxufVxuZXhwb3J0IHsgcmlkbGlzdFRleHQsIGNoYXB0ZXJUZXh0IH1cbiJdfQ==