"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.chapterText = exports.ridlistText = undefined;

var _book_names = require("../../data/book_names.json");

var _book_names2 = _interopRequireDefault(_book_names);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ridlistText = function ridlistText(ridlist, requestedTextsSet, db) {
	return new Promise(function (resolve, reject) {
		var ridlistResponse = {};
		var cursor = db.collection("verse_data").find({ rid: { $in: ridlist } });
		cursor.each(function (err, doc) {
			if (err) console.log("ERROR", err);
			if (doc != null) {
				ridlistResponse[doc["rid"]] = {};
				if (requestedTextsSet.has("wlc")) ridlistResponse[doc["rid"]]["wlc"] = doc["wlc"];
				if (requestedTextsSet.has("net")) ridlistResponse[doc["rid"]]["net"] = doc["net"];
				if (requestedTextsSet.has("lxx")) ridlistResponse[doc["rid"]]["lxx"] = doc["lxx"];
			} else {
				resolve(ridlistResponse);
			}
		});
	});
};

var chapterText = function chapterText(params, db) {
	var requestedTexts = new Set(params["texts"] || []);
	console.log(requestedTexts);
	if (!requestedTexts.has("wlc") && !requestedTexts.has("net") && !requestedTexts.has("lxx")) requestedTexts.add("wlc");

	var ref = params.reference;
	var minv = _book_names2.default[ref.book] * 10000000 + ref.chapter * 1000;
	var maxv = _book_names2.default[ref.book] * 10000000 + (ref.chapter + 1) * 1000;
	return new Promise(function (resolve, reject) {
		ridlistText(Array.from({ length: maxv - minv }, function (v, k) {
			return k + minv;
		}), requestedTexts, db).then(function (texts) {
			resolve({
				"reference": params.reference,
				"text": texts
			});
		}).catch(function (err) {
			reject(err);
		});
	});
};
exports.ridlistText = ridlistText;
exports.chapterText = chapterText;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9hcGkvY2hhcHRlci10ZXh0LmpzIl0sIm5hbWVzIjpbInJpZGxpc3RUZXh0IiwicmlkbGlzdCIsInJlcXVlc3RlZFRleHRzU2V0IiwiZGIiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsInJpZGxpc3RSZXNwb25zZSIsImN1cnNvciIsImNvbGxlY3Rpb24iLCJmaW5kIiwicmlkIiwiJGluIiwiZWFjaCIsImVyciIsImRvYyIsImNvbnNvbGUiLCJsb2ciLCJoYXMiLCJjaGFwdGVyVGV4dCIsInBhcmFtcyIsInJlcXVlc3RlZFRleHRzIiwiU2V0IiwiYWRkIiwicmVmIiwicmVmZXJlbmNlIiwibWludiIsImJvb2siLCJjaGFwdGVyIiwibWF4diIsIkFycmF5IiwiZnJvbSIsImxlbmd0aCIsInYiLCJrIiwidGhlbiIsInRleHRzIiwiY2F0Y2giXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7Ozs7O0FBRUEsSUFBTUEsY0FBYyxTQUFkQSxXQUFjLENBQUNDLE9BQUQsRUFBVUMsaUJBQVYsRUFBNkJDLEVBQTdCLEVBQW9DO0FBQ3ZELFFBQU8sSUFBSUMsT0FBSixDQUFZLFVBQUNDLE9BQUQsRUFBVUMsTUFBVixFQUFxQjtBQUN2QyxNQUFJQyxrQkFBa0IsRUFBdEI7QUFDQSxNQUFNQyxTQUFTTCxHQUFHTSxVQUFILENBQWMsWUFBZCxFQUE0QkMsSUFBNUIsQ0FBaUMsRUFBRUMsS0FBSyxFQUFFQyxLQUFLWCxPQUFQLEVBQVAsRUFBakMsQ0FBZjtBQUNBTyxTQUFPSyxJQUFQLENBQVksVUFBQ0MsR0FBRCxFQUFNQyxHQUFOLEVBQWM7QUFDekIsT0FBSUQsR0FBSixFQUNDRSxRQUFRQyxHQUFSLENBQVksT0FBWixFQUFxQkgsR0FBckI7QUFDRCxPQUFJQyxPQUFPLElBQVgsRUFBaUI7QUFDaEJSLG9CQUFnQlEsSUFBSSxLQUFKLENBQWhCLElBQThCLEVBQTlCO0FBQ0EsUUFBSWIsa0JBQWtCZ0IsR0FBbEIsQ0FBc0IsS0FBdEIsQ0FBSixFQUNDWCxnQkFBZ0JRLElBQUksS0FBSixDQUFoQixFQUE0QixLQUE1QixJQUFxQ0EsSUFBSSxLQUFKLENBQXJDO0FBQ0QsUUFBSWIsa0JBQWtCZ0IsR0FBbEIsQ0FBc0IsS0FBdEIsQ0FBSixFQUNDWCxnQkFBZ0JRLElBQUksS0FBSixDQUFoQixFQUE0QixLQUE1QixJQUFxQ0EsSUFBSSxLQUFKLENBQXJDO0FBQ0QsUUFBSWIsa0JBQWtCZ0IsR0FBbEIsQ0FBc0IsS0FBdEIsQ0FBSixFQUNDWCxnQkFBZ0JRLElBQUksS0FBSixDQUFoQixFQUE0QixLQUE1QixJQUFxQ0EsSUFBSSxLQUFKLENBQXJDO0FBQ0QsSUFSRCxNQVFPO0FBQ05WLFlBQVFFLGVBQVI7QUFDQTtBQUNELEdBZEQ7QUFlQSxFQWxCTSxDQUFQO0FBb0JBLENBckJEOztBQXVCQSxJQUFNWSxjQUFjLFNBQWRBLFdBQWMsQ0FBQ0MsTUFBRCxFQUFTakIsRUFBVCxFQUFnQjtBQUNuQyxLQUFJa0IsaUJBQWlCLElBQUlDLEdBQUosQ0FBUUYsT0FBTyxPQUFQLEtBQW1CLEVBQTNCLENBQXJCO0FBQ0FKLFNBQVFDLEdBQVIsQ0FBWUksY0FBWjtBQUNBLEtBQUksQ0FBQ0EsZUFBZUgsR0FBZixDQUFtQixLQUFuQixDQUFELElBQ0YsQ0FBQ0csZUFBZUgsR0FBZixDQUFtQixLQUFuQixDQURDLElBRUYsQ0FBQ0csZUFBZUgsR0FBZixDQUFtQixLQUFuQixDQUZILEVBR0NHLGVBQWVFLEdBQWYsQ0FBbUIsS0FBbkI7O0FBRUQsS0FBTUMsTUFBTUosT0FBT0ssU0FBbkI7QUFDQSxLQUFNQyxPQUFPLHFCQUFXRixJQUFJRyxJQUFmLElBQXVCLFFBQXZCLEdBQWtDSCxJQUFJSSxPQUFKLEdBQWMsSUFBN0Q7QUFDQSxLQUFNQyxPQUFPLHFCQUFXTCxJQUFJRyxJQUFmLElBQXVCLFFBQXZCLEdBQWtDLENBQUNILElBQUlJLE9BQUosR0FBWSxDQUFiLElBQWtCLElBQWpFO0FBQ0EsUUFBTyxJQUFJeEIsT0FBSixDQUFZLFVBQUNDLE9BQUQsRUFBVUMsTUFBVixFQUFxQjtBQUN2Q04sY0FBWThCLE1BQU1DLElBQU4sQ0FBVyxFQUFDQyxRQUFRSCxPQUFLSCxJQUFkLEVBQVgsRUFBZ0MsVUFBQ08sQ0FBRCxFQUFJQyxDQUFKO0FBQUEsVUFBVUEsSUFBRVIsSUFBWjtBQUFBLEdBQWhDLENBQVosRUFBK0RMLGNBQS9ELEVBQStFbEIsRUFBL0UsRUFBbUZnQyxJQUFuRixDQUF3RixVQUFDQyxLQUFELEVBQVc7QUFDbEcvQixXQUFRO0FBQ1AsaUJBQWFlLE9BQU9LLFNBRGI7QUFFUCxZQUFRVztBQUZELElBQVI7QUFJQSxHQUxELEVBS0dDLEtBTEgsQ0FLUyxVQUFDdkIsR0FBRCxFQUFTO0FBQ2pCUixVQUFPUSxHQUFQO0FBQ0EsR0FQRDtBQVFBLEVBVE0sQ0FBUDtBQVVBLENBckJEO1FBc0JTZCxXLEdBQUFBLFc7UUFBYW1CLFcsR0FBQUEsVyIsImZpbGUiOiJjaGFwdGVyLXRleHQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgYm9va19uYW1lcyBmcm9tICcuLi8uLi9kYXRhL2Jvb2tfbmFtZXMuanNvbidcblxuY29uc3QgcmlkbGlzdFRleHQgPSAocmlkbGlzdCwgcmVxdWVzdGVkVGV4dHNTZXQsIGRiKSA9PiB7XG5cdHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG5cdFx0bGV0IHJpZGxpc3RSZXNwb25zZSA9IHt9XG5cdFx0Y29uc3QgY3Vyc29yID0gZGIuY29sbGVjdGlvbihcInZlcnNlX2RhdGFcIikuZmluZCh7IHJpZDogeyAkaW46IHJpZGxpc3QgfSB9KVxuXHRcdGN1cnNvci5lYWNoKChlcnIsIGRvYykgPT4ge1xuXHRcdFx0aWYgKGVycilcblx0XHRcdFx0Y29uc29sZS5sb2coXCJFUlJPUlwiLCBlcnIpXG5cdFx0XHRpZiAoZG9jICE9IG51bGwpIHtcblx0XHRcdFx0cmlkbGlzdFJlc3BvbnNlW2RvY1tcInJpZFwiXV0gPSB7fVxuXHRcdFx0XHRpZiAocmVxdWVzdGVkVGV4dHNTZXQuaGFzKFwid2xjXCIpKVxuXHRcdFx0XHRcdHJpZGxpc3RSZXNwb25zZVtkb2NbXCJyaWRcIl1dW1wid2xjXCJdID0gZG9jW1wid2xjXCJdXG5cdFx0XHRcdGlmIChyZXF1ZXN0ZWRUZXh0c1NldC5oYXMoXCJuZXRcIikpXG5cdFx0XHRcdFx0cmlkbGlzdFJlc3BvbnNlW2RvY1tcInJpZFwiXV1bXCJuZXRcIl0gPSBkb2NbXCJuZXRcIl1cblx0XHRcdFx0aWYgKHJlcXVlc3RlZFRleHRzU2V0LmhhcyhcImx4eFwiKSlcblx0XHRcdFx0XHRyaWRsaXN0UmVzcG9uc2VbZG9jW1wicmlkXCJdXVtcImx4eFwiXSA9IGRvY1tcImx4eFwiXVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cmVzb2x2ZShyaWRsaXN0UmVzcG9uc2UpXG5cdFx0XHR9XG5cdFx0fSlcblx0fSlcblxufVxuXG5jb25zdCBjaGFwdGVyVGV4dCA9IChwYXJhbXMsIGRiKSA9PiB7XG5cdGxldCByZXF1ZXN0ZWRUZXh0cyA9IG5ldyBTZXQocGFyYW1zW1widGV4dHNcIl0gfHwgW10pXG5cdGNvbnNvbGUubG9nKHJlcXVlc3RlZFRleHRzKVxuXHRpZiAoIXJlcXVlc3RlZFRleHRzLmhhcyhcIndsY1wiKSAmJiBcblx0XHRcdCFyZXF1ZXN0ZWRUZXh0cy5oYXMoXCJuZXRcIikgJiYgXG5cdFx0XHQhcmVxdWVzdGVkVGV4dHMuaGFzKFwibHh4XCIpKVxuXHRcdHJlcXVlc3RlZFRleHRzLmFkZChcIndsY1wiKVxuXG5cdGNvbnN0IHJlZiA9IHBhcmFtcy5yZWZlcmVuY2Vcblx0Y29uc3QgbWludiA9IGJvb2tfbmFtZXNbcmVmLmJvb2tdICogMTAwMDAwMDAgKyByZWYuY2hhcHRlciAqIDEwMDBcblx0Y29uc3QgbWF4diA9IGJvb2tfbmFtZXNbcmVmLmJvb2tdICogMTAwMDAwMDAgKyAocmVmLmNoYXB0ZXIrMSkgKiAxMDAwXG5cdHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG5cdFx0cmlkbGlzdFRleHQoQXJyYXkuZnJvbSh7bGVuZ3RoOiBtYXh2LW1pbnZ9LCAodiwgaykgPT4gayttaW52KSwgcmVxdWVzdGVkVGV4dHMsIGRiKS50aGVuKCh0ZXh0cykgPT4ge1xuXHRcdFx0cmVzb2x2ZSh7XG5cdFx0XHRcdFwicmVmZXJlbmNlXCI6IHBhcmFtcy5yZWZlcmVuY2UsXG5cdFx0XHRcdFwidGV4dFwiOiB0ZXh0c1xuXHRcdFx0fSlcblx0XHR9KS5jYXRjaCgoZXJyKSA9PiB7XG5cdFx0XHRyZWplY3QoZXJyKVxuXHRcdH0pXG5cdH0pXG59XG5leHBvcnQgeyByaWRsaXN0VGV4dCwgY2hhcHRlclRleHQgfVxuIl19