'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports._wordsThatMatchQuery = exports.collocationSearch = exports.termSearch = undefined;

var _util = require('../util/util');

var _uniqueValuePerArray = require('../util/uniqueValuePerArray');

var _chapterText = require('./chapter-text');

var _tree_data = require('../../data/tree_data');

var _tree_data2 = _interopRequireDefault(_tree_data);

var _range_node_data = require('../../data/range_node_data');

var _range_node_data2 = _interopRequireDefault(_range_node_data);

var _book_names = require('../../data/book_names');

var _book_names2 = _interopRequireDefault(_book_names);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

// import word_data from '../../data/word_data_map'


var mysql = require('mysql');
var connection = mysql.createConnection({
	host: 'localhost',
	user: 'root',
	password: 'fish',
	database: 'parabible_test'
});
connection.connect();
// TODO: When should we end the connection?
//		 connection.end()

var RESULT_LIMIT = 500;

var doLog = true;
var consoleLog = async function consoleLog() {
	if (doLog) {
		var _console;

		(_console = console).log.apply(_console, arguments);
	}
};

var heatUpVerseWords = function heatUpVerseWords(verse_words, hot_set, lukewarm_set) {
	return verse_words.map(function (accentUnit) {
		return accentUnit.map(function (w) {
			if (hot_set.has(w["wid"])) w["temperature"] = 2;else if (lukewarm_set.has(w["wid"])) w["temperature"] = 1;
			return w;
		});
	});
};

var _doFilter = function _doFilter(filter, wordNodes) {
	var chapterFilter = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;

	if (filter.length > 0) {
		var chapterOffset = chapterFilter * 1000;
		var ridFilter = filter.map(function (f) {
			return _book_names2.default[f] * 10000000 + chapterOffset;
		});

		var extent = chapterFilter === 0 ? 10000000 : 1000;
		return wordNodes.filter(function (w) {
			var rid = _tree_data2.default[w].verse;
			return ridFilter.reduce(function (a, v) {
				return a || v <= rid && rid < v + extent;
			}, false);
		});
	} else {
		return wordNodes;
	}
};
var _wordsThatMatchQuery = function _wordsThatMatchQuery(query, filter) {
	var chapterFilter = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;

	var query_matches = [];
	Object.keys(query).forEach(function (k) {
		var v = query[k].normalize("NFKD");
		query_matches.push(_doFilter(filter, word_data[k][v], chapterFilter));
	});
	return _util.arrayIntersect.apply(undefined, query_matches);
};
var _queryForWids = async function _queryForWids(_ref) {
	var queryArray = _ref.queryArray,
	    search_range = _ref.search_range,
	    search_filter = _ref.search_filter;

	var word_matches = [];
	var exclusions = [];
	var current_match = -1;
	var starttime = process.hrtime();

	var promises = queryArray.map(function (query) {
		return new Promise(function (resolve, reject) {
			consoleLog("BENCHMARK Q: foreach cycle ", process.hrtime(starttime));
			// const query_matches = await _wordsThatMatchQuery(query.data, search_filter)

			//THIS IS THE NEW _wordsThatMatchQuery
			var selectionQuery = '\n\t\t\tSELECT wid, _' + search_range + '_node AS range_variable FROM wide_test\n\t\t\tWHERE ' + Object.keys(query.data).map(function (k) {
				return '_' + k + ' = ' + JSON.stringify(query.data[k].normalize("NFKD"));
			}).join(" AND ") + '\n\t\t';
			consoleLog(selectionQuery);
			connection.query(selectionQuery, function (error, results) {
				if (query.invert) exclusions.push.apply(exclusions, _toConsumableArray(results));else word_matches.push(results);
				resolve();
			});
		});
	});
	await Promise.all(promises);
	consoleLog("BENCHMARK Q: done with foreach", process.hrtime(starttime));

	var matches_by_search_range = word_matches.map(function (m) {
		return m.map(function (n) {
			return n.range_variable;
		});
	});
	var exclusions_by_search_range = exclusions.map(function (m) {
		return m.range_variable;
	});
	var matches_by_search_range_intersection = _util.arrayIntersect.apply(undefined, _toConsumableArray(matches_by_search_range));
	var range_matches = (0, _util.arrayDiff)(matches_by_search_range_intersection, exclusions_by_search_range);

	consoleLog("BENCHMARK Q: done intersecting", process.hrtime(starttime));
	var matched_words_by_range = {};
	word_matches.forEach(function (qMatches, i) {
		qMatches.forEach(function (w) {
			if (!matched_words_by_range.hasOwnProperty(w.range_variable)) {
				matched_words_by_range[w.range_variable] = [];
				for (var _i = 0; _i < word_matches.length; _i++) {
					matched_words_by_range[w.range_variable].push([]);
				}
			}
			matched_words_by_range[w.range_variable][i].push(w.wid);
		});
	});
	consoleLog("BENCHMARK Q: built some helpers", process.hrtime(starttime));
	var range_matches_with_unique_limit = range_matches.map(function (range_node) {
		var words_in_range = matched_words_by_range[range_node];
		var should_include = (0, _uniqueValuePerArray.uniqueValuePerArray)(words_in_range) ? words_in_range : false;
		return {
			sr_node: range_node,
			matching_word_nodes: should_include
		};
	}).filter(function (m) {
		return m && m.matching_word_nodes !== false;
	});
	consoleLog("BENCHMARK Q: query el indep. repr.", process.hrtime(starttime));
	consoleLog("RESULTS:", range_matches_with_unique_limit.length);
	return range_matches_with_unique_limit;
};

var termSearch = async function termSearch(params, db) {
	var starttime = process.hrtime();
	consoleLog("BENCHMARK: **querying for WIDS", process.hrtime(starttime));
	var matches = await _queryForWids({
		queryArray: params["query"],
		search_range: params["search_range"] || "clause",
		search_filter: params["search_filter"] || []
	});
	var truncated = false;
	if (matches.length > RESULT_LIMIT) {
		truncated = matches.length;
		matches.splice(RESULT_LIMIT);
	}
	consoleLog("BENCHMARK: **getting matching word sets", '(matches.length: ' + matches.length + '/' + truncated + ')', process.hrtime(starttime));
	var words_in_matching_ranges_set = new Set(matches.reduce(function (c, m) {
		return c.concat.apply(c, _toConsumableArray(_range_node_data2.default[m.sr_node]["wids"]));
	}, []));
	var all_word_matches = matches.reduce(function (c, n) {
		return c.concat.apply(c, _toConsumableArray(n.matching_word_nodes));
	}, []);
	var actual_matching_words_set = new Set((0, _util.arrayIntersect)(all_word_matches, words_in_matching_ranges_set));

	consoleLog("BENCHMARK: -- more of **getting matching word sets", process.hrtime(starttime));
	// Allowed texts
	var paramTexts = params["texts"] || [];
	var allowedTexts = ["wlc", "net", "lxx"];
	var textsToReturn = allowedTexts.filter(function (f) {
		return paramTexts.indexOf(f) !== -1;
	});
	if (textsToReturn.length === 0) textsToReturn = ["wlc", "net"];

	consoleLog("BENCHMARK: **now formulating final data", process.hrtime(starttime));
	var ridmatches = matches.reduce(function (c, n) {
		return c.concat.apply(c, _toConsumableArray(_range_node_data2.default[n.sr_node]["rids"]));
	}, []);
	var ridMatchText = await (0, _chapterText.ridlistText)(ridmatches, new Set(textsToReturn), db);
	Object.keys(ridMatchText).forEach(function (rid) {
		ridMatchText[rid]["wlc"] = heatUpVerseWords(ridMatchText[rid]["wlc"], actual_matching_words_set, words_in_matching_ranges_set);
	});
	consoleLog("BENCHMARK: **results now being processed", process.hrtime(starttime));
	var match_result_data = matches.map(function (m) {
		var ridTextObject = {};
		_range_node_data2.default[m.sr_node]["rids"].forEach(function (rid) {
			ridTextObject[rid] = ridMatchText[rid];
		});
		return {
			"node": m.sr_node,
			"verses": _range_node_data2.default[m.sr_node]["rids"],
			"text": ridTextObject
		};
	});

	var response = {
		"truncated": truncated,
		"results": match_result_data
	};
	consoleLog("BENCHMARK: **done", process.hrtime(starttime));
	consoleLog('TermSearch: ' + match_result_data.length + ' results (' + process.hrtime(starttime) + ')');
	return response;
};

var collocationSearch = function collocationSearch(params) {
	var grouping_key = "voc_utf8";
	return new Promise(function (resolve, reject) {
		// TODO: the syntax of _queryForWids has changed since this line...
		// !!!!!!!!!!!!!!
		var _queryForWids2 = _queryForWids({
			queryArray: params["query"],
			search_range: params["search_range"]
		}),
		    word_matches = _queryForWids2.word_matches;
		// params["whitelist"] == ["Verb""NFKD"]


		var word_match_morph = word_matches.map(function (wid) {
			return word_data[wid][grouping_key];
		});
		var tally_match_data = word_match_morph.reduce(function (c, k) {
			if (!c.hasOwnProperty(k)) c[k] = 0;
			c[k]++;
			return c;
		}, {});

		var response = {
			"length": Object.keys(tally_match_data).length,
			"results": tally_match_data
		};
		resolve(response);
	});
};

exports.termSearch = termSearch;
exports.collocationSearch = collocationSearch;
exports._wordsThatMatchQuery = _wordsThatMatchQuery;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9hcGkvdGVybS1zZWFyY2guanMiXSwibmFtZXMiOlsibXlzcWwiLCJyZXF1aXJlIiwiY29ubmVjdGlvbiIsImNyZWF0ZUNvbm5lY3Rpb24iLCJob3N0IiwidXNlciIsInBhc3N3b3JkIiwiZGF0YWJhc2UiLCJjb25uZWN0IiwiUkVTVUxUX0xJTUlUIiwiZG9Mb2ciLCJjb25zb2xlTG9nIiwibG9nIiwiaGVhdFVwVmVyc2VXb3JkcyIsInZlcnNlX3dvcmRzIiwiaG90X3NldCIsImx1a2V3YXJtX3NldCIsIm1hcCIsImFjY2VudFVuaXQiLCJoYXMiLCJ3IiwiX2RvRmlsdGVyIiwiZmlsdGVyIiwid29yZE5vZGVzIiwiY2hhcHRlckZpbHRlciIsImxlbmd0aCIsImNoYXB0ZXJPZmZzZXQiLCJyaWRGaWx0ZXIiLCJmIiwiZXh0ZW50IiwicmlkIiwidmVyc2UiLCJyZWR1Y2UiLCJhIiwidiIsIl93b3Jkc1RoYXRNYXRjaFF1ZXJ5IiwicXVlcnkiLCJxdWVyeV9tYXRjaGVzIiwiT2JqZWN0Iiwia2V5cyIsImZvckVhY2giLCJrIiwibm9ybWFsaXplIiwicHVzaCIsIndvcmRfZGF0YSIsIl9xdWVyeUZvcldpZHMiLCJxdWVyeUFycmF5Iiwic2VhcmNoX3JhbmdlIiwic2VhcmNoX2ZpbHRlciIsIndvcmRfbWF0Y2hlcyIsImV4Y2x1c2lvbnMiLCJjdXJyZW50X21hdGNoIiwic3RhcnR0aW1lIiwicHJvY2VzcyIsImhydGltZSIsInByb21pc2VzIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJzZWxlY3Rpb25RdWVyeSIsImRhdGEiLCJKU09OIiwic3RyaW5naWZ5Iiwiam9pbiIsImVycm9yIiwicmVzdWx0cyIsImludmVydCIsImFsbCIsIm1hdGNoZXNfYnlfc2VhcmNoX3JhbmdlIiwibSIsIm4iLCJyYW5nZV92YXJpYWJsZSIsImV4Y2x1c2lvbnNfYnlfc2VhcmNoX3JhbmdlIiwibWF0Y2hlc19ieV9zZWFyY2hfcmFuZ2VfaW50ZXJzZWN0aW9uIiwicmFuZ2VfbWF0Y2hlcyIsIm1hdGNoZWRfd29yZHNfYnlfcmFuZ2UiLCJxTWF0Y2hlcyIsImkiLCJoYXNPd25Qcm9wZXJ0eSIsIndpZCIsInJhbmdlX21hdGNoZXNfd2l0aF91bmlxdWVfbGltaXQiLCJ3b3Jkc19pbl9yYW5nZSIsInJhbmdlX25vZGUiLCJzaG91bGRfaW5jbHVkZSIsInNyX25vZGUiLCJtYXRjaGluZ193b3JkX25vZGVzIiwidGVybVNlYXJjaCIsInBhcmFtcyIsImRiIiwibWF0Y2hlcyIsInRydW5jYXRlZCIsInNwbGljZSIsIndvcmRzX2luX21hdGNoaW5nX3Jhbmdlc19zZXQiLCJTZXQiLCJjIiwiY29uY2F0IiwiYWxsX3dvcmRfbWF0Y2hlcyIsImFjdHVhbF9tYXRjaGluZ193b3Jkc19zZXQiLCJwYXJhbVRleHRzIiwiYWxsb3dlZFRleHRzIiwidGV4dHNUb1JldHVybiIsImluZGV4T2YiLCJyaWRtYXRjaGVzIiwicmlkTWF0Y2hUZXh0IiwibWF0Y2hfcmVzdWx0X2RhdGEiLCJyaWRUZXh0T2JqZWN0IiwicmVzcG9uc2UiLCJjb2xsb2NhdGlvblNlYXJjaCIsImdyb3VwaW5nX2tleSIsIndvcmRfbWF0Y2hfbW9ycGgiLCJ0YWxseV9tYXRjaF9kYXRhIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBR0E7Ozs7QUFDQTs7OztBQUNBOzs7Ozs7OztBQUhBOzs7QUFJQSxJQUFJQSxRQUFhQyxRQUFRLE9BQVIsQ0FBakI7QUFDQSxJQUFJQyxhQUFhRixNQUFNRyxnQkFBTixDQUF1QjtBQUN0Q0MsT0FBVyxXQUQyQjtBQUV0Q0MsT0FBVyxNQUYyQjtBQUd0Q0MsV0FBVyxNQUgyQjtBQUl0Q0MsV0FBVztBQUoyQixDQUF2QixDQUFqQjtBQU1BTCxXQUFXTSxPQUFYO0FBQ0E7QUFDQTs7QUFFQSxJQUFNQyxlQUFlLEdBQXJCOztBQUVBLElBQU1DLFFBQVEsSUFBZDtBQUNBLElBQU1DLGFBQWEsZUFBYkEsVUFBYSxHQUFvQjtBQUN0QyxLQUFJRCxLQUFK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LE9BQUksQ0FBQ3FELEVBQUVoQixjQUFGLENBQWlCckMsQ0FBakIsQ0FBTCxFQUNDcUQsRUFBRXJELENBQUYsSUFBTyxDQUFQO0FBQ0RxRCxLQUFFckQsQ0FBRjtBQUNBLFVBQU9xRCxDQUFQO0FBQ0EsR0FMd0IsRUFLdEIsRUFMc0IsQ0FBekI7O0FBT0EsTUFBTVksV0FBVztBQUNoQixhQUFVcEUsT0FBT0MsSUFBUCxDQUFZdUUsZ0JBQVosRUFBOEJyRixNQUR4QjtBQUVoQixjQUFXcUY7QUFGSyxHQUFqQjtBQUlBckQsVUFBUWlELFFBQVI7QUFDQSxFQXJCTSxDQUFQO0FBc0JBLENBeEJEOztRQTBCU3BCLFUsR0FBQUEsVTtRQUFZcUIsaUIsR0FBQUEsaUI7UUFBbUJ4RSxvQixHQUFBQSxvQiIsImZpbGUiOiJ0ZXJtLXNlYXJjaC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGFycmF5RGlmZiwgYXJyYXlJbnRlcnNlY3QgfSBmcm9tICcuLi91dGlsL3V0aWwnXG5pbXBvcnQgeyB1bmlxdWVWYWx1ZVBlckFycmF5IH0gZnJvbSAnLi4vdXRpbC91bmlxdWVWYWx1ZVBlckFycmF5J1xuaW1wb3J0IHsgcmlkbGlzdFRleHQgfSBmcm9tICcuL2NoYXB0ZXItdGV4dCdcblxuLy8gaW1wb3J0IHdvcmRfZGF0YSBmcm9tICcuLi8uLi9kYXRhL3dvcmRfZGF0YV9tYXAnXG5pbXBvcnQgdHJlZV9kYXRhIGZyb20gJy4uLy4uL2RhdGEvdHJlZV9kYXRhJ1xuaW1wb3J0IHJhbmdlX25vZGVfZGF0YSBmcm9tICcuLi8uLi9kYXRhL3JhbmdlX25vZGVfZGF0YSdcbmltcG9ydCBib29rX25hbWVzIGZyb20gJy4uLy4uL2RhdGEvYm9va19uYW1lcydcbnZhciBteXNxbCAgICAgID0gcmVxdWlyZSgnbXlzcWwnKVxudmFyIGNvbm5lY3Rpb24gPSBteXNxbC5jcmVhdGVDb25uZWN0aW9uKHtcbiAgaG9zdCAgICAgOiAnbG9jYWxob3N0JyxcbiAgdXNlciAgICAgOiAncm9vdCcsXG4gIHBhc3N3b3JkIDogJ2Zpc2gnLFxuICBkYXRhYmFzZSA6ICdwYXJhYmlibGVfdGVzdCdcbn0pXG5jb25uZWN0aW9uLmNvbm5lY3QoKVxuLy8gVE9ETzogV2hlbiBzaG91bGQgd2UgZW5kIHRoZSBjb25uZWN0aW9uP1xuLy9cdFx0IGNvbm5lY3Rpb24uZW5kKClcblxuY29uc3QgUkVTVUxUX0xJTUlUID0gNTAwXG5cbmNvbnN0IGRvTG9nID0gdHJ1ZVxuY29uc3QgY29uc29sZUxvZyA9IGFzeW5jICguLi5kZWJ1ZykgPT4ge1xuXHRpZiAoZG9Mb2cpIHtcblx0XHRjb25zb2xlLmxvZyguLi5kZWJ1Zylcblx0fVxufVxuXG5cbmNvbnN0IGhlYXRVcFZlcnNlV29yZHMgPSAodmVyc2Vfd29yZHMsIGhvdF9zZXQsIGx1a2V3YXJtX3NldCkgPT4ge1xuXHRyZXR1cm4gdmVyc2Vfd29yZHMubWFwKGFjY2VudFVuaXQgPT4gXG5cdFx0YWNjZW50VW5pdC5tYXAodyA9PiB7XG5cdFx0XHRpZiAoaG90X3NldC5oYXMod1tcIndpZFwiXSkpXG5cdFx0XHRcdHdbXCJ0ZW1wZXJhdHVyZVwiXSA9IDJcblx0XHRcdGVsc2UgaWYgKGx1a2V3YXJtX3NldC5oYXMod1tcIndpZFwiXSkpXG5cdFx0XHRcdHdbXCJ0ZW1wZXJhdHVyZVwiXSA9IDFcblx0XHRcdHJldHVybiB3XG5cdFx0fSlcblx0KVxufVxuXG5jb25zdCBfZG9GaWx0ZXIgPSAoZmlsdGVyLCB3b3JkTm9kZXMsIGNoYXB0ZXJGaWx0ZXI9MCkgPT4ge1xuXHRpZiAoZmlsdGVyLmxlbmd0aCA+IDApIHtcblx0XHRjb25zdCBjaGFwdGVyT2Zmc2V0ID0gY2hhcHRlckZpbHRlciAqIDEwMDBcblx0XHRjb25zdCByaWRGaWx0ZXIgPSBmaWx0ZXIubWFwKGYgPT4gYm9va19uYW1lc1tmXSAqIDEwMDAwMDAwICsgY2hhcHRlck9mZnNldClcblxuXHRcdGNvbnN0IGV4dGVudCA9IGNoYXB0ZXJGaWx0ZXIgPT09IDAgPyAxMDAwMDAwMCA6IDEwMDBcblx0XHRyZXR1cm4gd29yZE5vZGVzLmZpbHRlcih3ID0+IHtcblx0XHRcdGNvbnN0IHJpZCA9IHRyZWVfZGF0YVt3XS52ZXJzZVxuXHRcdFx0cmV0dXJuIHJpZEZpbHRlci5yZWR1Y2UoKGEsIHYpID0+IGEgfHwgdiA8PSByaWQgJiYgcmlkIDwgdiArIGV4dGVudCwgZmFsc2UpXG5cdFx0fSlcblx0fVxuXHRlbHNlIHtcblx0XHRyZXR1cm4gd29yZE5vZGVzXG5cdH1cbn1cbmNvbnN0IF93b3Jkc1RoYXRNYXRjaFF1ZXJ5ID0gKHF1ZXJ5LCBmaWx0ZXIsIGNoYXB0ZXJGaWx0ZXI9MCkgPT4ge1xuXHRsZXQgcXVlcnlfbWF0Y2hlcyA9IFtdXG5cdE9iamVjdC5rZXlzKHF1ZXJ5KS5mb3JFYWNoKChrKSA9PiB7XG5cdFx0Y29uc3QgdiA9IHF1ZXJ5W2tdLm5vcm1hbGl6ZShcIk5GS0RcIilcblx0XHRxdWVyeV9tYXRjaGVzLnB1c2goX2RvRmlsdGVyKGZpbHRlciwgd29yZF9kYXRhW2tdW3ZdLCBjaGFwdGVyRmlsdGVyKSlcblx0fSlcblx0cmV0dXJuIGFycmF5SW50ZXJzZWN0KC4uLnF1ZXJ5X21hdGNoZXMpXG59XG5jb25zdCBfcXVlcnlGb3JXaWRzID0gYXN5bmMgKHtxdWVyeUFycmF5LCBzZWFyY2hfcmFuZ2UsIHNlYXJjaF9maWx0ZXJ9KSA9PiB7XG5cdGxldCB3b3JkX21hdGNoZXMgPSBbXVxuXHRsZXQgZXhjbHVzaW9ucyA9IFtdXG5cdGxldCBjdXJyZW50X21hdGNoID0gLTFcblx0bGV0IHN0YXJ0dGltZSA9IHByb2Nlc3MuaHJ0aW1lKClcblxuXHRjb25zdCBwcm9taXNlcyA9IHF1ZXJ5QXJyYXkubWFwKChxdWVyeSkgPT4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuXHRcdGNvbnNvbGVMb2coXCJCRU5DSE1BUksgUTogZm9yZWFjaCBjeWNsZSBcIiwgcHJvY2Vzcy5ocnRpbWUoc3RhcnR0aW1lKSlcblx0XHQvLyBjb25zdCBxdWVyeV9tYXRjaGVzID0gYXdhaXQgX3dvcmRzVGhhdE1hdGNoUXVlcnkocXVlcnkuZGF0YSwgc2VhcmNoX2ZpbHRlcilcblxuXHRcdC8vVEhJUyBJUyBUSEUgTkVXIF93b3Jkc1RoYXRNYXRjaFF1ZXJ5XG5cdFx0Y29uc3Qgc2VsZWN0aW9uUXVlcnkgPSBgXG5cdFx0XHRTRUxFQ1Qgd2lkLCBfJHtzZWFyY2hfcmFuZ2V9X25vZGUgQVMgcmFuZ2VfdmFyaWFibGUgRlJPTSB3aWRlX3Rlc3Rcblx0XHRcdFdIRVJFICR7T2JqZWN0LmtleXMocXVlcnkuZGF0YSkubWFwKGsgPT4gYF8ke2t9ID0gJHtKU09OLnN0cmluZ2lmeShxdWVyeS5kYXRhW2tdLm5vcm1hbGl6ZShcIk5GS0RcIikpfWApLmpvaW4oXCIgQU5EIFwiKX1cblx0XHRgXG5cdFx0Y29uc29sZUxvZyhzZWxlY3Rpb25RdWVyeSlcblx0XHRjb25uZWN0aW9uLnF1ZXJ5KHNlbGVjdGlvblF1ZXJ5LCAoZXJyb3IsIHJlc3VsdHMpID0+IHtcblx0XHRcdGlmIChxdWVyeS5pbnZlcnQpXG5cdFx0XHRcdGV4Y2x1c2lvbnMucHVzaCguLi5yZXN1bHRzKVxuXHRcdFx0ZWxzZVxuXHRcdFx0XHR3b3JkX21hdGNoZXMucHVzaChyZXN1bHRzKVxuXHRcdFx0cmVzb2x2ZSgpXG5cdFx0fSlcblx0fSkpXG5cdGF3YWl0IFByb21pc2UuYWxsKHByb21pc2VzKVxuXHRjb25zb2xlTG9nKFwiQkVOQ0hNQVJLIFE6IGRvbmUgd2l0aCBmb3JlYWNoXCIsIHByb2Nlc3MuaHJ0aW1lKHN0YXJ0dGltZSkpXG5cdFxuXHRjb25zdCBtYXRjaGVzX2J5X3NlYXJjaF9yYW5nZSA9IHdvcmRfbWF0Y2hlcy5tYXAobSA9PiBtLm1hcChuID0+IG4ucmFuZ2VfdmFyaWFibGUpKVxuXHRjb25zdCBleGNsdXNpb25zX2J5X3NlYXJjaF9yYW5nZSA9IGV4Y2x1c2lvbnMubWFwKG0gPT4gbS5yYW5nZV92YXJpYWJsZSlcblx0Y29uc3QgbWF0Y2hlc19ieV9zZWFyY2hfcmFuZ2VfaW50ZXJzZWN0aW9uID0gYXJyYXlJbnRlcnNlY3QoLi4ubWF0Y2hlc19ieV9zZWFyY2hfcmFuZ2UpXG5cdGNvbnN0IHJhbmdlX21hdGNoZXMgPSBhcnJheURpZmYobWF0Y2hlc19ieV9zZWFyY2hfcmFuZ2VfaW50ZXJzZWN0aW9uLCBleGNsdXNpb25zX2J5X3NlYXJjaF9yYW5nZSlcblxuXHRjb25zb2xlTG9nKFwiQkVOQ0hNQVJLIFE6IGRvbmUgaW50ZXJzZWN0aW5nXCIsIHByb2Nlc3MuaHJ0aW1lKHN0YXJ0dGltZSkpXG5cdGNvbnN0IG1hdGNoZWRfd29yZHNfYnlfcmFuZ2UgPSB7fVxuXHR3b3JkX21hdGNoZXMuZm9yRWFjaCgocU1hdGNoZXMsIGkpID0+IHtcblx0XHRxTWF0Y2hlcy5mb3JFYWNoKHcgPT4ge1xuXHRcdFx0aWYgKCFtYXRjaGVkX3dvcmRzX2J5X3JhbmdlLmhhc093blByb3BlcnR5KHcucmFuZ2VfdmFyaWFibGUpKSB7XG5cdFx0XHRcdG1hdGNoZWRfd29yZHNfYnlfcmFuZ2Vbdy5yYW5nZV92YXJpYWJsZV0gPSBbXVxuXHRcdFx0XHRmb3IgKGxldCBpID0gMDsgaSA8IHdvcmRfbWF0Y2hlcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRcdG1hdGNoZWRfd29yZHNfYnlfcmFuZ2Vbdy5yYW5nZV92YXJpYWJsZV0ucHVzaChbXSlcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0bWF0Y2hlZF93b3Jkc19ieV9yYW5nZVt3LnJhbmdlX3ZhcmlhYmxlXVtpXS5wdXNoKHcud2lkKVxuXHRcdH0pXG5cdH0pXG5cdGNvbnNvbGVMb2coXCJCRU5DSE1BUksgUTogYnVpbHQgc29tZSBoZWxwZXJzXCIsIHByb2Nlc3MuaHJ0aW1lKHN0YXJ0dGltZSkpXG5cdGNvbnN0IHJhbmdlX21hdGNoZXNfd2l0aF91bmlxdWVfbGltaXQgPSByYW5nZV9tYXRjaGVzLm1hcChyYW5nZV9ub2RlID0+IHtcblx0XHRjb25zdCB3b3Jkc19pbl9yYW5nZSA9IG1hdGNoZWRfd29yZHNfYnlfcmFuZ2VbcmFuZ2Vfbm9kZV1cblx0XHRjb25zdCBzaG91bGRfaW5jbHVkZSA9IHVuaXF1ZVZhbHVlUGVyQXJyYXkod29yZHNfaW5fcmFuZ2UpID8gd29yZHNfaW5fcmFuZ2UgOiBmYWxzZVxuXHRcdHJldHVybiB7XG5cdFx0XHRzcl9ub2RlOiByYW5nZV9ub2RlLFxuXHRcdFx0bWF0Y2hpbmdfd29yZF9ub2Rlczogc2hvdWxkX2luY2x1ZGVcblx0XHR9XG5cdH0pLmZpbHRlcihtID0+IG0gJiYgbS5tYXRjaGluZ193b3JkX25vZGVzICE9PSBmYWxzZSlcblx0Y29uc29sZUxvZyhcIkJFTkNITUFSSyBROiBxdWVyeSBlbCBpbmRlcC4gcmVwci5cIiwgcHJvY2Vzcy5ocnRpbWUoc3RhcnR0aW1lKSlcblx0Y29uc29sZUxvZyhcIlJFU1VMVFM6XCIsIHJhbmdlX21hdGNoZXNfd2l0aF91bmlxdWVfbGltaXQubGVuZ3RoKVxuXHRyZXR1cm4gcmFuZ2VfbWF0Y2hlc193aXRoX3VuaXF1ZV9saW1pdFxufVxuXG5jb25zdCB0ZXJtU2VhcmNoID0gYXN5bmMgKHBhcmFtcywgZGIpID0+IHtcblx0bGV0IHN0YXJ0dGltZSA9IHByb2Nlc3MuaHJ0aW1lKClcblx0Y29uc29sZUxvZyhcIkJFTkNITUFSSzogKipxdWVyeWluZyBmb3IgV0lEU1wiLCBwcm9jZXNzLmhydGltZShzdGFydHRpbWUpKVxuXHRjb25zdCBtYXRjaGVzID0gYXdhaXQgX3F1ZXJ5Rm9yV2lkcyh7XG5cdFx0cXVlcnlBcnJheTogcGFyYW1zW1wicXVlcnlcIl0sXG5cdFx0c2VhcmNoX3JhbmdlOiBwYXJhbXNbXCJzZWFyY2hfcmFuZ2VcIl0gfHwgXCJjbGF1c2VcIixcblx0XHRzZWFyY2hfZmlsdGVyOiBwYXJhbXNbXCJzZWFyY2hfZmlsdGVyXCJdIHx8IFtdXG5cdH0pXG5cdGxldCB0cnVuY2F0ZWQgPSBmYWxzZVxuXHRpZiAobWF0Y2hlcy5sZW5ndGggPiBSRVNVTFRfTElNSVQpIHtcblx0XHR0cnVuY2F0ZWQgPSBtYXRjaGVzLmxlbmd0aFxuXHRcdG1hdGNoZXMuc3BsaWNlKFJFU1VMVF9MSU1JVClcblx0fVxuXHRjb25zb2xlTG9nKFwiQkVOQ0hNQVJLOiAqKmdldHRpbmcgbWF0Y2hpbmcgd29yZCBzZXRzXCIsIGAobWF0Y2hlcy5sZW5ndGg6ICR7bWF0Y2hlcy5sZW5ndGh9LyR7dHJ1bmNhdGVkfSlgLCBwcm9jZXNzLmhydGltZShzdGFydHRpbWUpKVxuXHRjb25zdCB3b3Jkc19pbl9tYXRjaGluZ19yYW5nZXNfc2V0ID0gbmV3IFNldChtYXRjaGVzLnJlZHVjZSgoYywgbSkgPT4gYy5jb25jYXQoLi4ucmFuZ2Vfbm9kZV9kYXRhW20uc3Jfbm9kZV1bXCJ3aWRzXCJdKSwgW10pKVxuXHRjb25zdCBhbGxfd29yZF9tYXRjaGVzID0gbWF0Y2hlcy5yZWR1Y2UoKGMsbikgPT4gYy5jb25jYXQoLi4ubi5tYXRjaGluZ193b3JkX25vZGVzKSwgW10pXG5cdGNvbnN0IGFjdHVhbF9tYXRjaGluZ193b3Jkc19zZXQgPSBuZXcgU2V0KGFycmF5SW50ZXJzZWN0KGFsbF93b3JkX21hdGNoZXMsIHdvcmRzX2luX21hdGNoaW5nX3Jhbmdlc19zZXQpKVxuXHRcblx0Y29uc29sZUxvZyhcIkJFTkNITUFSSzogLS0gbW9yZSBvZiAqKmdldHRpbmcgbWF0Y2hpbmcgd29yZCBzZXRzXCIsIHByb2Nlc3MuaHJ0aW1lKHN0YXJ0dGltZSkpXG5cdC8vIEFsbG93ZWQgdGV4dHNcblx0Y29uc3QgcGFyYW1UZXh0cyA9IHBhcmFtc1tcInRleHRzXCJdIHx8IFtdXG5cdGNvbnN0IGFsbG93ZWRUZXh0cyA9IFtcIndsY1wiLCBcIm5ldFwiLCBcImx4eFwiXVxuXHRsZXQgdGV4dHNUb1JldHVybiA9IGFsbG93ZWRUZXh0cy5maWx0ZXIoZiA9PiBwYXJhbVRleHRzLmluZGV4T2YoZikgIT09IC0xKVxuXHRpZiAodGV4dHNUb1JldHVybi5sZW5ndGggPT09IDApXG5cdFx0dGV4dHNUb1JldHVybiA9IFtcIndsY1wiLCBcIm5ldFwiXVxuXG5cdGNvbnNvbGVMb2coXCJCRU5DSE1BUks6ICoqbm93IGZvcm11bGF0aW5nIGZpbmFsIGRhdGFcIiwgcHJvY2Vzcy5ocnRpbWUoc3RhcnR0aW1lKSlcblx0Y29uc3QgcmlkbWF0Y2hlcyA9IG1hdGNoZXMucmVkdWNlKChjLCBuKSA9PiBjLmNvbmNhdCguLi5yYW5nZV9ub2RlX2RhdGFbbi5zcl9ub2RlXVtcInJpZHNcIl0pLCBbXSlcblx0Y29uc3QgcmlkTWF0Y2hUZXh0ID0gYXdhaXQgcmlkbGlzdFRleHQocmlkbWF0Y2hlcywgbmV3IFNldCh0ZXh0c1RvUmV0dXJuKSwgZGIpXG5cdE9iamVjdC5rZXlzKHJpZE1hdGNoVGV4dCkuZm9yRWFjaChyaWQgPT4ge1xuXHRcdHJpZE1hdGNoVGV4dFtyaWRdW1wid2xjXCJdID0gaGVhdFVwVmVyc2VXb3Jkcyhcblx0XHRcdHJpZE1hdGNoVGV4dFtyaWRdW1wid2xjXCJdLFxuXHRcdFx0YWN0dWFsX21hdGNoaW5nX3dvcmRzX3NldCxcblx0XHRcdHdvcmRzX2luX21hdGNoaW5nX3Jhbmdlc19zZXRcblx0XHQpXG5cdH0pXG5cdGNvbnNvbGVMb2coXCJCRU5DSE1BUks6ICoqcmVzdWx0cyBub3cgYmVpbmcgcHJvY2Vzc2VkXCIsIHByb2Nlc3MuaHJ0aW1lKHN0YXJ0dGltZSkpXG5cdGNvbnN0IG1hdGNoX3Jlc3VsdF9kYXRhID0gbWF0Y2hlcy5tYXAoKG0pID0+IHtcblx0XHRjb25zdCByaWRUZXh0T2JqZWN0ID0ge31cblx0XHRyYW5nZV9ub2RlX2RhdGFbbS5zcl9ub2RlXVtcInJpZHNcIl0uZm9yRWFjaChyaWQgPT4ge1xuXHRcdFx0cmlkVGV4dE9iamVjdFtyaWRdID0gcmlkTWF0Y2hUZXh0W3JpZF1cblx0XHR9KVxuXHRcdHJldHVybiB7XG5cdFx0XHRcIm5vZGVcIjogbS5zcl9ub2RlLFxuXHRcdFx0XCJ2ZXJzZXNcIjogcmFuZ2Vfbm9kZV9kYXRhW20uc3Jfbm9kZV1bXCJyaWRzXCJdLFxuXHRcdFx0XCJ0ZXh0XCI6IHJpZFRleHRPYmplY3Rcblx0XHR9XG5cdH0pXG5cblx0Y29uc3QgcmVzcG9uc2UgPSB7XG5cdFx0XCJ0cnVuY2F0ZWRcIjogdHJ1bmNhdGVkLFxuXHRcdFwicmVzdWx0c1wiOiBtYXRjaF9yZXN1bHRfZGF0YVxuXHR9XG5cdGNvbnNvbGVMb2coXCJCRU5DSE1BUks6ICoqZG9uZVwiLCBwcm9jZXNzLmhydGltZShzdGFydHRpbWUpKVxuXHRjb25zb2xlTG9nKGBUZXJtU2VhcmNoOiAke21hdGNoX3Jlc3VsdF9kYXRhLmxlbmd0aH0gcmVzdWx0cyAoJHtwcm9jZXNzLmhydGltZShzdGFydHRpbWUpfSlgKVxuXHRyZXR1cm4ocmVzcG9uc2UpXG59XG5cbmNvbnN0IGNvbGxvY2F0aW9uU2VhcmNoID0gKHBhcmFtcyk9PiB7XG5cdGNvbnN0IGdyb3VwaW5nX2tleSA9IFwidm9jX3V0ZjhcIlxuXHRyZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuXHRcdC8vIFRPRE86IHRoZSBzeW50YXggb2YgX3F1ZXJ5Rm9yV2lkcyBoYXMgY2hhbmdlZCBzaW5jZSB0aGlzIGxpbmUuLi5cblx0XHQvLyAhISEhISEhISEhISEhIVxuXHRcdGNvbnN0IHsgd29yZF9tYXRjaGVzIH0gPSBfcXVlcnlGb3JXaWRzKHtcblx0XHRcdHF1ZXJ5QXJyYXk6IHBhcmFtc1tcInF1ZXJ5XCJdLFxuXHRcdFx0c2VhcmNoX3JhbmdlOiBwYXJhbXNbXCJzZWFyY2hfcmFuZ2VcIl1cblx0XHR9KVxuXHRcdC8vIHBhcmFtc1tcIndoaXRlbGlzdFwiXSA9PSBbXCJWZXJiXCJcIk5GS0RcIl1cblx0XHRjb25zdCB3b3JkX21hdGNoX21vcnBoPSB3b3JkX21hdGNoZXMubWFwKHdpZCA9PiB3b3JkX2RhdGFbd2lkXVtncm91cGluZ19rZXldKVxuXHRcdGNvbnN0IHRhbGx5X21hdGNoX2RhdGEgPSB3b3JkX21hdGNoX21vcnBoLnJlZHVjZSgoYywgaykgPT4ge1xuXHRcdFx0aWYgKCFjLmhhc093blByb3BlcnR5KGspKVxuXHRcdFx0XHRjW2tdID0gMFxuXHRcdFx0Y1trXSsrXG5cdFx0XHRyZXR1cm4gY1xuXHRcdH0sIHt9KVxuXG5cdFx0Y29uc3QgcmVzcG9uc2UgPSB7XG5cdFx0XHRcImxlbmd0aFwiOiBPYmplY3Qua2V5cyh0YWxseV9tYXRjaF9kYXRhKS5sZW5ndGgsXG5cdFx0XHRcInJlc3VsdHNcIjogdGFsbHlfbWF0Y2hfZGF0YVxuXHRcdH1cblx0XHRyZXNvbHZlKHJlc3BvbnNlKVxuXHR9KVxufVxuXG5leHBvcnQgeyB0ZXJtU2VhcmNoLCBjb2xsb2NhdGlvblNlYXJjaCwgX3dvcmRzVGhhdE1hdGNoUXVlcnkgfSJdfQ==