'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.collocationSearch = exports.chapterText = exports.termSearch = undefined;

var _util = require('../util/util');

var _chapterText = require('./chapter-text');

var _word_data_map = require('../../data/word_data_map');

var _word_data_map2 = _interopRequireDefault(_word_data_map);

var _tree_data = require('../../data/tree_data');

var _tree_data2 = _interopRequireDefault(_tree_data);

var _range_node_data = require('../../data/range_node_data');

var _range_node_data2 = _interopRequireDefault(_range_node_data);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }
// import verse_data from '..../../data/verse_data'


// import wid_to_rid from '..../../data/wid_to_rid'


// const verseTextFromNode = (n) => range_node_data[n]["rids"].reduce((c,v) => c.concat(verse_data[v]["verse_text"]), [])
// const parallelTextFromNode = (n) => range_node_data[n]["rids"].reduce((c,v) => c + verse_data[v]["parallel_text"], "")
var heatUpVerseWords = function heatUpVerseWords(verse_words, hot_set, lukewarm_set) {
	return verse_words.map(function (w) {
		if (hot_set.has(w["wid"])) w["temperature"] = 2;else if (lukewarm_set.has(w["wid"])) w["temperature"] = 1;
		return w;
	});
};

var _queryForWids = function _queryForWids(_ref) {
	var queryArray = _ref.queryArray,
	    search_range = _ref.search_range;

	var word_matches = [];
	var exclusions = [];
	var current_match = -1;
	var starttime = process.hrtime();
	queryArray.forEach(function (query) {
		console.log("BENCHMARK Q: foreach cycle ", process.hrtime(starttime));
		var invert = false;
		if ("invert" in query) {
			if (query["invert"] == "t") {
				invert = true;
			}
			delete query["invert"];
		}
		var query_matches = [];
		Object.keys(query).forEach(function (k) {
			var v = query[k];
			query_matches.push(_word_data_map2.default[k][v]);
		});
		var intersected_query_matches = _util.arrayIntersect.apply(undefined, query_matches);
		if (invert) exclusions.push.apply(exclusions, _toConsumableArray(intersected_query_matches));else word_matches.push(intersected_query_matches);
	});
	console.log("BENCHMARK Q: done with foreach", process.hrtime(starttime));

	var sr_matches = word_matches.map(function (m) {
		return m.map(function (n) {
			return _tree_data2.default[n][search_range];
		});
	});
	var sr_exclusions = exclusions.map(function (m) {
		return m.map(function (n) {
			return _tree_data2.default[n][search_range];
		});
	});
	var match_intersection = _util.arrayIntersect.apply(undefined, _toConsumableArray(sr_matches));
	var range_matches = (0, _util.arrayDiff)(match_intersection, sr_exclusions);
	console.log("BENCHMARK Q: done intersecting", process.hrtime(starttime));
	console.log("RESULTS:", range_matches.length);
	return { word_matches: word_matches, range_matches: range_matches };
};

var termSearch = function termSearch(params, db) {
	return new Promise(function (resolve, reject) {
		var _Array$prototype;

		var starttime = process.hrtime();
		console.log("BENCHMARK: starting now", process.hrtime(starttime));

		var _queryForWids2 = _queryForWids({
			queryArray: params["query"],
			search_range: params["search_range"] || "clause"
		}),
		    word_matches = _queryForWids2.word_matches,
		    range_matches = _queryForWids2.range_matches;

		var words_in_matching_ranges_set = new Set(range_matches.reduce(function (c, m) {
			return c.concat.apply(c, _toConsumableArray(_range_node_data2.default[m]["wids"]));
		}, []));
		console.log("BENCHMARK: getting matching word sets", process.hrtime(starttime));
		var actual_matching_words_set = new Set((0, _util.arrayIntersect)((_Array$prototype = Array.prototype).concat.apply(_Array$prototype, _toConsumableArray(word_matches)), words_in_matching_ranges_set));

		console.log("BENCHMARK: now formulating final data", process.hrtime(starttime));
		var ridmatches = range_matches.reduce(function (c, n) {
			return c.concat.apply(c, _toConsumableArray(_range_node_data2.default[n]["rids"]));
		}, []);
		(0, _chapterText.ridlistText)(ridmatches, new Set(["wlc", "net"]), db).then(function (ridMatchText) {
			console.log("BENCHMARK: results now being processed", process.hrtime(starttime));
			var match_result_data = range_matches.map(function (m) {
				var wlc_words = [];
				var p_text = "";
				_range_node_data2.default[m]["rids"].forEach(function (rid) {
					wlc_words.push.apply(wlc_words, _toConsumableArray(ridMatchText[rid]["wlc"]));
					p_text += ridMatchText[rid]["net"];
				});
				return {
					"node": m,
					"verses": _range_node_data2.default[m]["rids"],
					"wlc": heatUpVerseWords(wlc_words, actual_matching_words_set, words_in_matching_ranges_set),
					"net": p_text
				};
			});

			var response = {
				"length": match_result_data.length,
				"results": match_result_data
			};
			resolve(response);
			console.log("BENCHMARK: done", process.hrtime(starttime));
		}).catch();
	});
};

var collocationSearch = function collocationSearch(params) {
	var grouping_key = "voc_utf8";
	return new Promise(function (resolve, reject) {
		var _queryForWids3 = _queryForWids({
			queryArray: params["query"],
			search_range: params["search_range"]
		}),
		    word_matches = _queryForWids3.word_matches;
		// params["whitelist"] == ["Verb"]


		var word_match_morph = word_matches.map(function (wid) {
			return _word_data_map2.default[wid][grouping_key];
		});
		var tally_match_data = word_match_morph.reduce(function (c, k) {
			if (!c.hasOwnProperty(k)) c[k] = 0;
			c[k]++;
			return c;
		}, {});

		var response = {
			"length": Object.keys(tally_match_data).length,
			"results": tally_match_data
		};
		resolve(response);
	});
};

var chapterText = function chapterText(minv, maxv) {
	return new Promise(function (resolve, reject) {
		var ridlist = Array.from({ length: maxv - minv }, function (v, k) {
			return k + minv;
		});
		var response = ridlist.reduce(function (c, v) {
			if (!verse_data.hasOwnProperty(v)) return c;
			console.log("c:", c);
			c.push({
				"verse": v % 1000,
				"words": verse_data[v]["verse_text"].sort(function (a, b) {
					return a.wid - b.wid;
				})
			});
			return c;
		}, []);
		resolve(response);
	});
};

exports.termSearch = termSearch;
exports.chapterText = chapterText;
exports.collocationSearch = collocationSearch;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,