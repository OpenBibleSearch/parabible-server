'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports._wordsThatMatchQuery = exports.collocationSearch = exports.termSearch = undefined;

var _util = require('../util/util');

var _chapterText = require('./chapter-text');

var _word_data_map = require('../../data/word_data_map');

var _word_data_map2 = _interopRequireDefault(_word_data_map);

var _tree_data = require('../../data/tree_data');

var _tree_data2 = _interopRequireDefault(_tree_data);

var _range_node_data = require('../../data/range_node_data');

var _range_node_data2 = _interopRequireDefault(_range_node_data);

var _book_names = require('../../data/book_names');

var _book_names2 = _interopRequireDefault(_book_names);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var doLog = false;
var consoleLog = function consoleLog() {
	if (doLog) {
		var _console;

		(_console = console).log.apply(_console, arguments);
	}
};

var heatUpVerseWords = function heatUpVerseWords(verse_words, hot_set, lukewarm_set) {
	return verse_words.map(function (accentUnit) {
		return accentUnit.map(function (w) {
			if (hot_set.has(w["wid"])) w["temperature"] = 2;else if (lukewarm_set.has(w["wid"])) w["temperature"] = 1;
			return w;
		});
	});
};

var _doFilter = function _doFilter(filter, wordNodes) {
	var chapterFilter = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;

	if (filter.length > 0) {
		var chapterOffset = chapterFilter * 1000;
		var ridFilter = filter.map(function (f) {
			return _book_names2.default[f] * 10000000 + chapterOffset;
		});

		var extent = chapterFilter === 0 ? 10000000 : 1000;
		return wordNodes.filter(function (w) {
			var rid = _tree_data2.default[w].verse;
			return ridFilter.reduce(function (a, v) {
				return a || v <= rid && rid < v + extent;
			}, false);
		});
	} else {
		return wordNodes;
	}
};
var _wordsThatMatchQuery = function _wordsThatMatchQuery(query, filter) {
	var chapterFilter = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;

	var query_matches = [];
	Object.keys(query).forEach(function (k) {
		var v = query[k];
		query_matches.push(_doFilter(filter, _word_data_map2.default[k][v], chapterFilter));
	});
	return _util.arrayIntersect.apply(undefined, query_matches);
};
var _queryForWids = function _queryForWids(_ref) {
	var queryArray = _ref.queryArray,
	    search_range = _ref.search_range,
	    search_filter = _ref.search_filter;

	var word_matches = [];
	var exclusions = [];
	var current_match = -1;
	// let starttime = process.hrtime()
	queryArray.forEach(function (query) {
		// consoleLog("BENCHMARK Q: foreach cycle ", process.hrtime(starttime))
		var query_matches = _wordsThatMatchQuery(query.data, search_filter);

		if (query.invert) exclusions.push.apply(exclusions, _toConsumableArray(query_matches));else word_matches.push(query_matches);
	});
	// consoleLog("BENCHMARK Q: done with foreach", process.hrtime(starttime))

	var sr_matches = word_matches.map(function (m) {
		return m.map(function (n) {
			return _tree_data2.default[n][search_range];
		});
	});
	var sr_exclusions = exclusions.map(function (m) {
		return _tree_data2.default[m][search_range];
	});
	var match_intersection = _util.arrayIntersect.apply(undefined, _toConsumableArray(sr_matches));
	var range_matches = (0, _util.arrayDiff)(match_intersection, sr_exclusions);
	// consoleLog("BENCHMARK Q: done intersecting", process.hrtime(starttime))
	// consoleLog("RESULTS:", range_matches.length)
	return { word_matches: word_matches, range_matches: range_matches };
};

var termSearch = function termSearch(params, db) {
	return new Promise(function (resolve, reject) {
		var _Array$prototype;

		// let starttime = process.hrtime()
		// consoleLog("BENCHMARK: starting now", process.hrtime(starttime))
		var _queryForWids2 = _queryForWids({
			queryArray: params["query"],
			search_range: params["search_range"] || "clause",
			search_filter: params["search_filter"] || []
		}),
		    word_matches = _queryForWids2.word_matches,
		    range_matches = _queryForWids2.range_matches;

		var words_in_matching_ranges_set = new Set(range_matches.reduce(function (c, m) {
			return c.concat.apply(c, _toConsumableArray(_range_node_data2.default[m]["wids"]));
		}, []));
		// consoleLog("BENCHMARK: getting matching word sets", process.hrtime(starttime))
		var actual_matching_words_set = new Set((0, _util.arrayIntersect)((_Array$prototype = Array.prototype).concat.apply(_Array$prototype, _toConsumableArray(word_matches)), words_in_matching_ranges_set));

		// consoleLog("BENCHMARK: now formulating final data", process.hrtime(starttime))
		var ridmatches = range_matches.reduce(function (c, n) {
			return c.concat.apply(c, _toConsumableArray(_range_node_data2.default[n]["rids"]));
		}, []);
		(0, _chapterText.ridlistText)(ridmatches, new Set(["wlc", "net"]), db).then(function (ridMatchText) {
			Object.keys(ridMatchText).forEach(function (rid) {
				ridMatchText[rid]["wlc"] = heatUpVerseWords(ridMatchText[rid]["wlc"], actual_matching_words_set, words_in_matching_ranges_set);
			});
			// consoleLog("BENCHMARK: results now being processed", process.hrtime(starttime))
			var match_result_data = range_matches.map(function (m) {
				var ridTextObject = {};
				_range_node_data2.default[m]["rids"].forEach(function (rid) {
					ridTextObject[rid] = ridMatchText[rid];
				});
				return {
					"node": m,
					"verses": _range_node_data2.default[m]["rids"],
					"text": ridTextObject
				};
			});

			var response = {
				"length": match_result_data.length,
				"results": match_result_data
			};
			resolve(response);
			// consoleLog("BENCHMARK: done", process.hrtime(starttime))
		}).catch();
	});
};

var collocationSearch = function collocationSearch(params) {
	var grouping_key = "voc_utf8";
	return new Promise(function (resolve, reject) {
		var _queryForWids3 = _queryForWids({
			queryArray: params["query"],
			search_range: params["search_range"]
		}),
		    word_matches = _queryForWids3.word_matches;
		// params["whitelist"] == ["Verb"]


		var word_match_morph = word_matches.map(function (wid) {
			return _word_data_map2.default[wid][grouping_key];
		});
		var tally_match_data = word_match_morph.reduce(function (c, k) {
			if (!c.hasOwnProperty(k)) c[k] = 0;
			c[k]++;
			return c;
		}, {});

		var response = {
			"length": Object.keys(tally_match_data).length,
			"results": tally_match_data
		};
		resolve(response);
	});
};

exports.termSearch = termSearch;
exports.collocationSearch = collocationSearch;
exports._wordsThatMatchQuery = _wordsThatMatchQuery;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,