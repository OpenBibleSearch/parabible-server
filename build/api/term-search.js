'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports._wordsThatMatchQuery = exports.collocationSearch = exports.termSearch = undefined;

var _util = require('../util/util');

var _uniqueValuePerArray = require('../util/uniqueValuePerArray');

var _chapterText = require('./chapter-text');

var _word_data_map = require('../../data/word_data_map');

var _word_data_map2 = _interopRequireDefault(_word_data_map);

var _tree_data = require('../../data/tree_data');

var _tree_data2 = _interopRequireDefault(_tree_data);

var _range_node_data = require('../../data/range_node_data');

var _range_node_data2 = _interopRequireDefault(_range_node_data);

var _book_names = require('../../data/book_names');

var _book_names2 = _interopRequireDefault(_book_names);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var doLog = true;
var consoleLog = function consoleLog() {
	if (doLog) {
		var _console;

		(_console = console).log.apply(_console, arguments);
	}
};

var heatUpVerseWords = function heatUpVerseWords(verse_words, hot_set, lukewarm_set) {
	return verse_words.map(function (accentUnit) {
		return accentUnit.map(function (w) {
			if (hot_set.has(w["wid"])) w["temperature"] = 2;else if (lukewarm_set.has(w["wid"])) w["temperature"] = 1;
			return w;
		});
	});
};

var _doFilter = function _doFilter(filter, wordNodes) {
	var chapterFilter = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;

	if (filter.length > 0) {
		var chapterOffset = chapterFilter * 1000;
		var ridFilter = filter.map(function (f) {
			return _book_names2.default[f] * 10000000 + chapterOffset;
		});

		var extent = chapterFilter === 0 ? 10000000 : 1000;
		return wordNodes.filter(function (w) {
			var rid = _tree_data2.default[w].verse;
			return ridFilter.reduce(function (a, v) {
				return a || v <= rid && rid < v + extent;
			}, false);
		});
	} else {
		return wordNodes;
	}
};
var _wordsThatMatchQuery = function _wordsThatMatchQuery(query, filter) {
	var chapterFilter = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;

	var query_matches = [];
	Object.keys(query).forEach(function (k) {
		var v = query[k].normalize();
		query_matches.push(_doFilter(filter, _word_data_map2.default[k][v], chapterFilter));
	});
	return _util.arrayIntersect.apply(undefined, query_matches);
};
var _queryForWids = function _queryForWids(_ref) {
	var queryArray = _ref.queryArray,
	    search_range = _ref.search_range,
	    search_filter = _ref.search_filter;

	var word_matches = [];
	var exclusions = [];
	var current_match = -1;
	var starttime = process.hrtime();
	queryArray.forEach(function (query) {
		// consoleLog("BENCHMARK Q: foreach cycle ", process.hrtime(starttime))
		var query_matches = _wordsThatMatchQuery(query.data, search_filter);

		if (query.invert) exclusions.push.apply(exclusions, _toConsumableArray(query_matches));else word_matches.push(query_matches);
	});
	consoleLog("BENCHMARK Q: done with foreach", process.hrtime(starttime));

	var sr_matches = word_matches.map(function (m) {
		return m.map(function (n) {
			return _tree_data2.default[n][search_range];
		});
	});
	var sr_exclusions = exclusions.map(function (m) {
		return _tree_data2.default[m][search_range];
	});
	var match_intersection = _util.arrayIntersect.apply(undefined, _toConsumableArray(sr_matches));
	var range_matches = (0, _util.arrayDiff)(match_intersection, sr_exclusions);

	var range_matches_with_unique_limit = range_matches.map(function (r) {
		var word_match_indices = sr_matches.map(function (q, qi) {
			return q.reduce(function (a, e, i) {
				return e === r ? a.concat(word_matches[qi][i]) : a;
			}, []);
		});
		var should_include = (0, _uniqueValuePerArray.uniqueValuePerArray)(word_match_indices) !== false ? word_match_indices : false;
		return {
			sr_node: r,
			matching_word_nodes: should_include
		};
	}).filter(function (m) {
		return m.matching_word_nodes !== false;
	});
	consoleLog("BENCHMARK Q: done intersecting", process.hrtime(starttime));
	consoleLog("RESULTS:", range_matches_with_unique_limit.length);
	return range_matches_with_unique_limit;
	// return { word_matches, range_matches }
};

var termSearch = function termSearch(params, db) {
	return new Promise(function (resolve, reject) {
		// let starttime = process.hrtime()
		// consoleLog("BENCHMARK: starting now", process.hrtime(starttime))
		var matches = _queryForWids({
			queryArray: params["query"],
			search_range: params["search_range"] || "clause",
			search_filter: params["search_filter"] || []
		});
		// consoleLog("BENCHMARK: getting matching word sets", process.hrtime(starttime))
		var words_in_matching_ranges_set = new Set(matches.reduce(function (c, m) {
			return c.concat.apply(c, _toConsumableArray(_range_node_data2.default[m.sr_node]["wids"]));
		}, []));
		var all_word_matches = matches.reduce(function (c, n) {
			return c.concat.apply(c, _toConsumableArray(n.matching_word_nodes));
		}, []);
		var actual_matching_words_set = new Set((0, _util.arrayIntersect)(all_word_matches, words_in_matching_ranges_set));

		// Allowed texts
		var paramTexts = params["texts"] || [];
		var allowedTexts = ["wlc", "net", "lxx"];
		var textsToReturn = allowedTexts.filter(function (f) {
			return paramTexts.indexOf(f) !== -1;
		});
		if (textsToReturn.length === 0) textsToReturn = ["wlc", "net"];

		// consoleLog("BENCHMARK: now formulating final data", process.hrtime(starttime))
		var ridmatches = matches.reduce(function (c, n) {
			return c.concat.apply(c, _toConsumableArray(_range_node_data2.default[n.sr_node]["rids"]));
		}, []);
		(0, _chapterText.ridlistText)(ridmatches, new Set(textsToReturn), db).then(function (ridMatchText) {
			Object.keys(ridMatchText).forEach(function (rid) {
				ridMatchText[rid]["wlc"] = heatUpVerseWords(ridMatchText[rid]["wlc"], actual_matching_words_set, words_in_matching_ranges_set);
			});
			// consoleLog("BENCHMARK: results now being processed", process.hrtime(starttime))
			var match_result_data = matches.map(function (m) {
				var ridTextObject = {};
				_range_node_data2.default[m.sr_node]["rids"].forEach(function (rid) {
					ridTextObject[rid] = ridMatchText[rid];
				});
				return {
					"node": m.sr_node,
					"verses": _range_node_data2.default[m.sr_node]["rids"],
					"text": ridTextObject
				};
			});

			var response = {
				"length": match_result_data.length,
				"results": match_result_data
			};
			resolve(response);
			// consoleLog("BENCHMARK: done", process.hrtime(starttime))
		}).catch();
	});
};

var collocationSearch = function collocationSearch(params) {
	var grouping_key = "voc_utf8";
	return new Promise(function (resolve, reject) {
		// TODO: the syntax of _queryForWids has changed since this line...
		// !!!!!!!!!!!!!!
		var _queryForWids2 = _queryForWids({
			queryArray: params["query"],
			search_range: params["search_range"]
		}),
		    word_matches = _queryForWids2.word_matches;
		// params["whitelist"] == ["Verb"]


		var word_match_morph = word_matches.map(function (wid) {
			return _word_data_map2.default[wid][grouping_key];
		});
		var tally_match_data = word_match_morph.reduce(function (c, k) {
			if (!c.hasOwnProperty(k)) c[k] = 0;
			c[k]++;
			return c;
		}, {});

		var response = {
			"length": Object.keys(tally_match_data).length,
			"results": tally_match_data
		};
		resolve(response);
	});
};

exports.termSearch = termSearch;
exports.collocationSearch = collocationSearch;
exports._wordsThatMatchQuery = _wordsThatMatchQuery;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9hcGkvdGVybS1zZWFyY2guanMiXSwibmFtZXMiOlsiZG9Mb2ciLCJjb25zb2xlTG9nIiwibG9nIiwiaGVhdFVwVmVyc2VXb3JkcyIsInZlcnNlX3dvcmRzIiwiaG90X3NldCIsImx1a2V3YXJtX3NldCIsIm1hcCIsImFjY2VudFVuaXQiLCJoYXMiLCJ3IiwiX2RvRmlsdGVyIiwiZmlsdGVyIiwid29yZE5vZGVzIiwiY2hhcHRlckZpbHRlciIsImxlbmd0aCIsImNoYXB0ZXJPZmZzZXQiLCJyaWRGaWx0ZXIiLCJmIiwiZXh0ZW50IiwicmlkIiwidmVyc2UiLCJyZWR1Y2UiLCJhIiwidiIsIl93b3Jkc1RoYXRNYXRjaFF1ZXJ5IiwicXVlcnkiLCJxdWVyeV9tYXRjaGVzIiwiT2JqZWN0Iiwia2V5cyIsImZvckVhY2giLCJrIiwibm9ybWFsaXplIiwicHVzaCIsIl9xdWVyeUZvcldpZHMiLCJxdWVyeUFycmF5Iiwic2VhcmNoX3JhbmdlIiwic2VhcmNoX2ZpbHRlciIsIndvcmRfbWF0Y2hlcyIsImV4Y2x1c2lvbnMiLCJjdXJyZW50X21hdGNoIiwic3RhcnR0aW1lIiwicHJvY2VzcyIsImhydGltZSIsImRhdGEiLCJpbnZlcnQiLCJzcl9tYXRjaGVzIiwibSIsIm4iLCJzcl9leGNsdXNpb25zIiwibWF0Y2hfaW50ZXJzZWN0aW9uIiwicmFuZ2VfbWF0Y2hlcyIsInJhbmdlX21hdGNoZXNfd2l0aF91bmlxdWVfbGltaXQiLCJ3b3JkX21hdGNoX2luZGljZXMiLCJxIiwicWkiLCJlIiwiaSIsInIiLCJjb25jYXQiLCJzaG91bGRfaW5jbHVkZSIsInNyX25vZGUiLCJtYXRjaGluZ193b3JkX25vZGVzIiwidGVybVNlYXJjaCIsInBhcmFtcyIsImRiIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJtYXRjaGVzIiwid29yZHNfaW5fbWF0Y2hpbmdfcmFuZ2VzX3NldCIsIlNldCIsImMiLCJhbGxfd29yZF9tYXRjaGVzIiwiYWN0dWFsX21hdGNoaW5nX3dvcmRzX3NldCIsInBhcmFtVGV4dHMiLCJhbGxvd2VkVGV4dHMiLCJ0ZXh0c1RvUmV0dXJuIiwiaW5kZXhPZiIsInJpZG1hdGNoZXMiLCJ0aGVuIiwicmlkTWF0Y2hUZXh0IiwibWF0Y2hfcmVzdWx0X2RhdGEiLCJyaWRUZXh0T2JqZWN0IiwicmVzcG9uc2UiLCJjYXRjaCIsImNvbGxvY2F0aW9uU2VhcmNoIiwiZ3JvdXBpbmdfa2V5Iiwid29yZF9tYXRjaF9tb3JwaCIsIndpZCIsInRhbGx5X21hdGNoX2RhdGEiLCJoYXNPd25Qcm9wZXJ0eSJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUVBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7Ozs7OztBQUVBLElBQU1BLFFBQVEsSUFBZDtBQUNBLElBQU1DLGFBQWEsU0FBYkEsVUFBYSxHQUFjO0FBQ2hDLEtBQUlELEtBQUosRUFBVztBQUFBOztBQUNWLHVCQUFRRSxHQUFSO0FBQ0E7QUFDRCxDQUpEOztBQU1BLElBQU1DLG1CQUFtQixTQUFuQkEsZ0JBQW1CLENBQUNDLFdBQUQsRUFBY0MsT0FBZCxFQUF1QkMsWUFBdkIsRUFBd0M7QUFDaEUsUUFBT0YsWUFBWUcsR0FBWixDQUFnQjtBQUFBLFNBQ3RCQyxXQUFXRCxHQUFYLENBQWUsYUFBSztBQUNuQixPQUFJRixRQUFRSSxHQUFSLENBQVlDLEVBQUUsS0FBRixDQUFaLENBQUosRUFDQ0EsRUFBRSxhQUFGLElBQW1CLENBQW5CLENBREQsS0FFSyxJQUFJSixhQUFhRyxHQUFiLENBQWlCQyxFQUFFLEtBQUYsQ0FBakIsQ0FBSixFQUNKQSxFQUFFLGFBQUYsSUFBbUIsQ0FBbkI7QUFDRCxVQUFPQSxDQUFQO0FBQ0EsR0FORCxDQURzQjtBQUFBLEVBQWhCLENBQVA7QUFTQSxDQVZEOztBQVlBLElBQU1DLFlBQVksU0FBWkEsU0FBWSxDQUFDQyxNQUFELEVBQVNDLFNBQVQsRUFBd0M7QUFBQSxLQUFwQkMsYUFBb0IsdUVBQU4sQ0FBTTs7QUFDekQsS0FBSUYsT0FB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QXhCO0FBQ0EsTUFBTUcsbUJBQW1CRixpQkFBaUJsRSxNQUFqQixDQUF3QixVQUFDa0QsQ0FBRCxFQUFJekMsQ0FBSixFQUFVO0FBQzFELE9BQUksQ0FBQ3lDLEVBQUVtQixjQUFGLENBQWlCNUQsQ0FBakIsQ0FBTCxFQUNDeUMsRUFBRXpDLENBQUYsSUFBTyxDQUFQO0FBQ0R5QyxLQUFFekMsQ0FBRjtBQUNBLFVBQU95QyxDQUFQO0FBQ0EsR0FMd0IsRUFLdEIsRUFMc0IsQ0FBekI7O0FBT0EsTUFBTVksV0FBVztBQUNoQixhQUFVeEQsT0FBT0MsSUFBUCxDQUFZNkQsZ0JBQVosRUFBOEIzRSxNQUR4QjtBQUVoQixjQUFXMkU7QUFGSyxHQUFqQjtBQUlBdkIsVUFBUWlCLFFBQVI7QUFDQSxFQXJCTSxDQUFQO0FBc0JBLENBeEJEOztRQTBCU3JCLFUsR0FBQUEsVTtRQUFZdUIsaUIsR0FBQUEsaUI7UUFBbUI3RCxvQixHQUFBQSxvQiIsImZpbGUiOiJ0ZXJtLXNlYXJjaC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGFycmF5RGlmZiwgYXJyYXlJbnRlcnNlY3QgfSBmcm9tICcuLi91dGlsL3V0aWwnXG5pbXBvcnQgeyB1bmlxdWVWYWx1ZVBlckFycmF5IH0gZnJvbSAnLi4vdXRpbC91bmlxdWVWYWx1ZVBlckFycmF5J1xuaW1wb3J0IHsgcmlkbGlzdFRleHQgfSBmcm9tICcuL2NoYXB0ZXItdGV4dCdcblxuaW1wb3J0IHdvcmRfZGF0YSBmcm9tICcuLi8uLi9kYXRhL3dvcmRfZGF0YV9tYXAnXG5pbXBvcnQgdHJlZV9kYXRhIGZyb20gJy4uLy4uL2RhdGEvdHJlZV9kYXRhJ1xuaW1wb3J0IHJhbmdlX25vZGVfZGF0YSBmcm9tICcuLi8uLi9kYXRhL3JhbmdlX25vZGVfZGF0YSdcbmltcG9ydCBib29rX25hbWVzIGZyb20gJy4uLy4uL2RhdGEvYm9va19uYW1lcydcblxuY29uc3QgZG9Mb2cgPSB0cnVlXG5jb25zdCBjb25zb2xlTG9nID0gKC4uLmRlYnVnKSA9PiB7XG5cdGlmIChkb0xvZykge1xuXHRcdGNvbnNvbGUubG9nKC4uLmRlYnVnKVxuXHR9XG59XG5cbmNvbnN0IGhlYXRVcFZlcnNlV29yZHMgPSAodmVyc2Vfd29yZHMsIGhvdF9zZXQsIGx1a2V3YXJtX3NldCkgPT4ge1xuXHRyZXR1cm4gdmVyc2Vfd29yZHMubWFwKGFjY2VudFVuaXQgPT4gXG5cdFx0YWNjZW50VW5pdC5tYXAodyA9PiB7XG5cdFx0XHRpZiAoaG90X3NldC5oYXMod1tcIndpZFwiXSkpXG5cdFx0XHRcdHdbXCJ0ZW1wZXJhdHVyZVwiXSA9IDJcblx0XHRcdGVsc2UgaWYgKGx1a2V3YXJtX3NldC5oYXMod1tcIndpZFwiXSkpXG5cdFx0XHRcdHdbXCJ0ZW1wZXJhdHVyZVwiXSA9IDFcblx0XHRcdHJldHVybiB3XG5cdFx0fSlcblx0KVxufVxuXG5jb25zdCBfZG9GaWx0ZXIgPSAoZmlsdGVyLCB3b3JkTm9kZXMsIGNoYXB0ZXJGaWx0ZXI9MCkgPT4ge1xuXHRpZiAoZmlsdGVyLmxlbmd0aCA+IDApIHtcblx0XHRjb25zdCBjaGFwdGVyT2Zmc2V0ID0gY2hhcHRlckZpbHRlciAqIDEwMDBcblx0XHRjb25zdCByaWRGaWx0ZXIgPSBmaWx0ZXIubWFwKGYgPT4gYm9va19uYW1lc1tmXSAqIDEwMDAwMDAwICsgY2hhcHRlck9mZnNldClcblxuXHRcdGNvbnN0IGV4dGVudCA9IGNoYXB0ZXJGaWx0ZXIgPT09IDAgPyAxMDAwMDAwMCA6IDEwMDBcblx0XHRyZXR1cm4gd29yZE5vZGVzLmZpbHRlcih3ID0+IHtcblx0XHRcdGNvbnN0IHJpZCA9IHRyZWVfZGF0YVt3XS52ZXJzZVxuXHRcdFx0cmV0dXJuIHJpZEZpbHRlci5yZWR1Y2UoKGEsIHYpID0+IGEgfHwgdiA8PSByaWQgJiYgcmlkIDwgdiArIGV4dGVudCwgZmFsc2UpXG5cdFx0fSlcblx0fVxuXHRlbHNlIHtcblx0XHRyZXR1cm4gd29yZE5vZGVzXG5cdH1cbn1cbmNvbnN0IF93b3Jkc1RoYXRNYXRjaFF1ZXJ5ID0gKHF1ZXJ5LCBmaWx0ZXIsIGNoYXB0ZXJGaWx0ZXI9MCkgPT4ge1xuXHRsZXQgcXVlcnlfbWF0Y2hlcyA9IFtdXG5cdE9iamVjdC5rZXlzKHF1ZXJ5KS5mb3JFYWNoKChrKSA9PiB7XG5cdFx0Y29uc3QgdiA9IHF1ZXJ5W2tdLm5vcm1hbGl6ZSgpXG5cdFx0cXVlcnlfbWF0Y2hlcy5wdXNoKF9kb0ZpbHRlcihmaWx0ZXIsIHdvcmRfZGF0YVtrXVt2XSwgY2hhcHRlckZpbHRlcikpXG5cdH0pXG5cdHJldHVybiBhcnJheUludGVyc2VjdCguLi5xdWVyeV9tYXRjaGVzKVxufVxuY29uc3QgX3F1ZXJ5Rm9yV2lkcyA9ICh7cXVlcnlBcnJheSwgc2VhcmNoX3JhbmdlLCBzZWFyY2hfZmlsdGVyfSkgPT4ge1xuXHRsZXQgd29yZF9tYXRjaGVzID0gW11cblx0bGV0IGV4Y2x1c2lvbnMgPSBbXVxuXHRsZXQgY3VycmVudF9tYXRjaCA9IC0xXG5cdGxldCBzdGFydHRpbWUgPSBwcm9jZXNzLmhydGltZSgpXG5cdHF1ZXJ5QXJyYXkuZm9yRWFjaCgocXVlcnkpID0+IHtcblx0XHQvLyBjb25zb2xlTG9nKFwiQkVOQ0hNQVJLIFE6IGZvcmVhY2ggY3ljbGUgXCIsIHByb2Nlc3MuaHJ0aW1lKHN0YXJ0dGltZSkpXG5cdFx0Y29uc3QgcXVlcnlfbWF0Y2hlcyA9IF93b3Jkc1RoYXRNYXRjaFF1ZXJ5KHF1ZXJ5LmRhdGEsIHNlYXJjaF9maWx0ZXIpXG5cblx0XHRpZiAocXVlcnkuaW52ZXJ0KVxuXHRcdFx0ZXhjbHVzaW9ucy5wdXNoKC4uLnF1ZXJ5X21hdGNoZXMpXG5cdFx0ZWxzZVxuXHRcdFx0d29yZF9tYXRjaGVzLnB1c2gocXVlcnlfbWF0Y2hlcylcblx0fSlcblx0Y29uc29sZUxvZyhcIkJFTkNITUFSSyBROiBkb25lIHdpdGggZm9yZWFjaFwiLCBwcm9jZXNzLmhydGltZShzdGFydHRpbWUpKVxuXG5cdGNvbnN0IHNyX21hdGNoZXMgPSB3b3JkX21hdGNoZXMubWFwKG0gPT4gbS5tYXAobiA9PiB0cmVlX2RhdGFbbl1bc2VhcmNoX3JhbmdlXSkpXG5cdGNvbnN0IHNyX2V4Y2x1c2lvbnMgPSBleGNsdXNpb25zLm1hcChtID0+IHRyZWVfZGF0YVttXVtzZWFyY2hfcmFuZ2VdKVxuXHRjb25zdCBtYXRjaF9pbnRlcnNlY3Rpb24gPSBhcnJheUludGVyc2VjdCguLi5zcl9tYXRjaGVzKVxuXHRjb25zdCByYW5nZV9tYXRjaGVzID0gYXJyYXlEaWZmKG1hdGNoX2ludGVyc2VjdGlvbiwgc3JfZXhjbHVzaW9ucylcblxuXHRjb25zdCByYW5nZV9tYXRjaGVzX3dpdGhfdW5pcXVlX2xpbWl0ID0gcmFuZ2VfbWF0Y2hlcy5tYXAociA9PiB7XG5cdFx0Y29uc3Qgd29yZF9tYXRjaF9pbmRpY2VzID0gc3JfbWF0Y2hlcy5tYXAoKHEsIHFpKSA9PiBxLnJlZHVjZSgoYSwgZSwgaSkgPT4gKGUgPT09IHIpID8gYS5jb25jYXQod29yZF9tYXRjaGVzW3FpXVtpXSkgOiBhLCBbXSkpXG5cdFx0Y29uc3Qgc2hvdWxkX2luY2x1ZGUgPSB1bmlxdWVWYWx1ZVBlckFycmF5KHdvcmRfbWF0Y2hfaW5kaWNlcykgIT09IGZhbHNlID8gd29yZF9tYXRjaF9pbmRpY2VzIDogZmFsc2Vcblx0XHRyZXR1cm4ge1xuXHRcdFx0c3Jfbm9kZTogcixcblx0XHRcdG1hdGNoaW5nX3dvcmRfbm9kZXM6IHNob3VsZF9pbmNsdWRlXG5cdFx0fVxuXHR9KS5maWx0ZXIobSA9PiBtLm1hdGNoaW5nX3dvcmRfbm9kZXMgIT09IGZhbHNlKVxuXHRjb25zb2xlTG9nKFwiQkVOQ0hNQVJLIFE6IGRvbmUgaW50ZXJzZWN0aW5nXCIsIHByb2Nlc3MuaHJ0aW1lKHN0YXJ0dGltZSkpXG5cdGNvbnNvbGVMb2coXCJSRVNVTFRTOlwiLCByYW5nZV9tYXRjaGVzX3dpdGhfdW5pcXVlX2xpbWl0Lmxlbmd0aClcblx0cmV0dXJuIHJhbmdlX21hdGNoZXNfd2l0aF91bmlxdWVfbGltaXRcblx0Ly8gcmV0dXJuIHsgd29yZF9tYXRjaGVzLCByYW5nZV9tYXRjaGVzIH1cbn1cblxuY29uc3QgdGVybVNlYXJjaCA9IChwYXJhbXMsIGRiKT0+IHtcblx0cmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcblx0XHQvLyBsZXQgc3RhcnR0aW1lID0gcHJvY2Vzcy5ocnRpbWUoKVxuXHRcdC8vIGNvbnNvbGVMb2coXCJCRU5DSE1BUks6IHN0YXJ0aW5nIG5vd1wiLCBwcm9jZXNzLmhydGltZShzdGFydHRpbWUpKVxuXHRcdGNvbnN0IG1hdGNoZXMgPSBfcXVlcnlGb3JXaWRzKHtcblx0XHRcdHF1ZXJ5QXJyYXk6IHBhcmFtc1tcInF1ZXJ5XCJdLFxuXHRcdFx0c2VhcmNoX3JhbmdlOiBwYXJhbXNbXCJzZWFyY2hfcmFuZ2VcIl0gfHwgXCJjbGF1c2VcIixcblx0XHRcdHNlYXJjaF9maWx0ZXI6IHBhcmFtc1tcInNlYXJjaF9maWx0ZXJcIl0gfHwgW11cblx0XHR9KVxuXHRcdC8vIGNvbnNvbGVMb2coXCJCRU5DSE1BUks6IGdldHRpbmcgbWF0Y2hpbmcgd29yZCBzZXRzXCIsIHByb2Nlc3MuaHJ0aW1lKHN0YXJ0dGltZSkpXG5cdFx0Y29uc3Qgd29yZHNfaW5fbWF0Y2hpbmdfcmFuZ2VzX3NldCA9IG5ldyBTZXQobWF0Y2hlcy5yZWR1Y2UoKGMsIG0pID0+IGMuY29uY2F0KC4uLnJhbmdlX25vZGVfZGF0YVttLnNyX25vZGVdW1wid2lkc1wiXSksIFtdKSlcblx0XHRjb25zdCBhbGxfd29yZF9tYXRjaGVzID0gbWF0Y2hlcy5yZWR1Y2UoKGMsbikgPT4gYy5jb25jYXQoLi4ubi5tYXRjaGluZ193b3JkX25vZGVzKSwgW10pXG5cdFx0Y29uc3QgYWN0dWFsX21hdGNoaW5nX3dvcmRzX3NldCA9IG5ldyBTZXQoYXJyYXlJbnRlcnNlY3QoYWxsX3dvcmRfbWF0Y2hlcywgd29yZHNfaW5fbWF0Y2hpbmdfcmFuZ2VzX3NldCkpXG5cblx0XHQvLyBBbGxvd2VkIHRleHRzXG5cdFx0Y29uc3QgcGFyYW1UZXh0cyA9IHBhcmFtc1tcInRleHRzXCJdIHx8IFtdXG5cdFx0Y29uc3QgYWxsb3dlZFRleHRzID0gW1wid2xjXCIsIFwibmV0XCIsIFwibHh4XCJdXG5cdFx0bGV0IHRleHRzVG9SZXR1cm4gPSBhbGxvd2VkVGV4dHMuZmlsdGVyKGYgPT4gcGFyYW1UZXh0cy5pbmRleE9mKGYpICE9PSAtMSlcblx0XHRpZiAodGV4dHNUb1JldHVybi5sZW5ndGggPT09IDApXG5cdFx0XHR0ZXh0c1RvUmV0dXJuID0gW1wid2xjXCIsIFwibmV0XCJdXG5cblx0XHQvLyBjb25zb2xlTG9nKFwiQkVOQ0hNQVJLOiBub3cgZm9ybXVsYXRpbmcgZmluYWwgZGF0YVwiLCBwcm9jZXNzLmhydGltZShzdGFydHRpbWUpKVxuXHRcdGNvbnN0IHJpZG1hdGNoZXMgPSBtYXRjaGVzLnJlZHVjZSgoYywgbikgPT4gYy5jb25jYXQoLi4ucmFuZ2Vfbm9kZV9kYXRhW24uc3Jfbm9kZV1bXCJyaWRzXCJdKSwgW10pXG5cdFx0cmlkbGlzdFRleHQocmlkbWF0Y2hlcywgbmV3IFNldCh0ZXh0c1RvUmV0dXJuKSwgZGIpLnRoZW4oKHJpZE1hdGNoVGV4dCkgPT4ge1xuXHRcdFx0T2JqZWN0LmtleXMocmlkTWF0Y2hUZXh0KS5mb3JFYWNoKHJpZCA9PiB7XG5cdFx0XHRcdHJpZE1hdGNoVGV4dFtyaWRdW1wid2xjXCJdID0gaGVhdFVwVmVyc2VXb3Jkcyhcblx0XHRcdFx0XHRyaWRNYXRjaFRleHRbcmlkXVtcIndsY1wiXSxcblx0XHRcdFx0XHRhY3R1YWxfbWF0Y2hpbmdfd29yZHNfc2V0LFxuXHRcdFx0XHRcdHdvcmRzX2luX21hdGNoaW5nX3Jhbmdlc19zZXRcblx0XHRcdFx0KVxuXHRcdFx0fSlcblx0XHRcdC8vIGNvbnNvbGVMb2coXCJCRU5DSE1BUks6IHJlc3VsdHMgbm93IGJlaW5nIHByb2Nlc3NlZFwiLCBwcm9jZXNzLmhydGltZShzdGFydHRpbWUpKVxuXHRcdFx0Y29uc3QgbWF0Y2hfcmVzdWx0X2RhdGEgPSBtYXRjaGVzLm1hcCgobSkgPT4ge1xuXHRcdFx0XHRjb25zdCByaWRUZXh0T2JqZWN0ID0ge31cblx0XHRcdFx0cmFuZ2Vfbm9kZV9kYXRhW20uc3Jfbm9kZV1bXCJyaWRzXCJdLmZvckVhY2gocmlkID0+IHtcblx0XHRcdFx0XHRyaWRUZXh0T2JqZWN0W3JpZF0gPSByaWRNYXRjaFRleHRbcmlkXVxuXHRcdFx0XHR9KVxuXHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdFwibm9kZVwiOiBtLnNyX25vZGUsXG5cdFx0XHRcdFx0XCJ2ZXJzZXNcIjogcmFuZ2Vfbm9kZV9kYXRhW20uc3Jfbm9kZV1bXCJyaWRzXCJdLFxuXHRcdFx0XHRcdFwidGV4dFwiOiByaWRUZXh0T2JqZWN0XG5cdFx0XHRcdH1cblx0XHRcdH0pXG5cblx0XHRcdGNvbnN0IHJlc3BvbnNlID0ge1xuXHRcdFx0XHRcImxlbmd0aFwiOiBtYXRjaF9yZXN1bHRfZGF0YS5sZW5ndGgsXG5cdFx0XHRcdFwicmVzdWx0c1wiOiBtYXRjaF9yZXN1bHRfZGF0YVxuXHRcdFx0fVxuXHRcdFx0cmVzb2x2ZShyZXNwb25zZSlcblx0XHRcdC8vIGNvbnNvbGVMb2coXCJCRU5DSE1BUks6IGRvbmVcIiwgcHJvY2Vzcy5ocnRpbWUoc3RhcnR0aW1lKSlcblx0XHR9KS5jYXRjaCgpXG5cdH0pXG59XG5cbmNvbnN0IGNvbGxvY2F0aW9uU2VhcmNoID0gKHBhcmFtcyk9PiB7XG5cdGNvbnN0IGdyb3VwaW5nX2tleSA9IFwidm9jX3V0ZjhcIlxuXHRyZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuXHRcdC8vIFRPRE86IHRoZSBzeW50YXggb2YgX3F1ZXJ5Rm9yV2lkcyBoYXMgY2hhbmdlZCBzaW5jZSB0aGlzIGxpbmUuLi5cblx0XHQvLyAhISEhISEhISEhISEhIVxuXHRcdGNvbnN0IHsgd29yZF9tYXRjaGVzIH0gPSBfcXVlcnlGb3JXaWRzKHtcblx0XHRcdHF1ZXJ5QXJyYXk6IHBhcmFtc1tcInF1ZXJ5XCJdLFxuXHRcdFx0c2VhcmNoX3JhbmdlOiBwYXJhbXNbXCJzZWFyY2hfcmFuZ2VcIl1cblx0XHR9KVxuXHRcdC8vIHBhcmFtc1tcIndoaXRlbGlzdFwiXSA9PSBbXCJWZXJiXCJdXG5cdFx0Y29uc3Qgd29yZF9tYXRjaF9tb3JwaD0gd29yZF9tYXRjaGVzLm1hcCh3aWQgPT4gd29yZF9kYXRhW3dpZF1bZ3JvdXBpbmdfa2V5XSlcblx0XHRjb25zdCB0YWxseV9tYXRjaF9kYXRhID0gd29yZF9tYXRjaF9tb3JwaC5yZWR1Y2UoKGMsIGspID0+IHtcblx0XHRcdGlmICghYy5oYXNPd25Qcm9wZXJ0eShrKSlcblx0XHRcdFx0Y1trXSA9IDBcblx0XHRcdGNba10rK1xuXHRcdFx0cmV0dXJuIGNcblx0XHR9LCB7fSlcblxuXHRcdGNvbnN0IHJlc3BvbnNlID0ge1xuXHRcdFx0XCJsZW5ndGhcIjogT2JqZWN0LmtleXModGFsbHlfbWF0Y2hfZGF0YSkubGVuZ3RoLFxuXHRcdFx0XCJyZXN1bHRzXCI6IHRhbGx5X21hdGNoX2RhdGFcblx0XHR9XG5cdFx0cmVzb2x2ZShyZXNwb25zZSlcblx0fSlcbn1cblxuZXhwb3J0IHsgdGVybVNlYXJjaCwgY29sbG9jYXRpb25TZWFyY2gsIF93b3Jkc1RoYXRNYXRjaFF1ZXJ5IH0iXX0=