'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.chapterText = exports.ridlistText = undefined;

var _book_names = require('../../data/book_names.json');

var _book_names2 = _interopRequireDefault(_book_names);

var _sqlite = require('sqlite3');

var _sqlite2 = _interopRequireDefault(_sqlite);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var db = _sqlite2.default.cached.Database('data/textfabric.db');

var ridlistText = function ridlistText(ridlist, requested_texts_set) {
	return new Promise(function (resolve, reject) {
		var ridlistResponse = {};

		var sql_get_parallel_text = "SELECT `rid`, `text` FROM `ParallelText` WHERE `rid` IN (" + ridlist.join(",") + ")";
		db.all(sql_get_parallel_text, function (err, rows) {
			if (err) {
				console.log(err);
				reject("failure on db.all sqlite3");
				return;
			}

			rows.forEach(function (r) {
				ridlistResponse[r.rid] = {
					"net": r.text
				};
			});
			resolve(ridlistResponse);
		});
	});
};

var chapterText = function chapterText(params) {
	var requested_texts = new Set(params["texts"] || []);
	if (!requested_texts.has("wlc") && !requested_texts.has("net") && !requested_texts.has("lxx")) requested_texts.add("wlc");

	var ref = params.reference;
	var minv = _book_names2.default[ref.book] * 10000000 + ref.chapter * 1000;
	var maxv = _book_names2.default[ref.book] * 10000000 + (ref.chapter + 1) * 1000;
	return new Promise(function (resolve, reject) {
		ridlistText(Array.from({ length: maxv - minv }, function (v, k) {
			return k + minv;
		}), requested_texts).then(function (texts) {
			resolve({
				"reference": params.reference,
				"text": texts
			});
		}).catch(function (err) {
			reject(err);
		});
	});
};
exports.ridlistText = ridlistText;
exports.chapterText = chapterText;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9hcGkvY2hhcHRlci10ZXh0LXNxbGl0ZTMuanMiXSwibmFtZXMiOlsiZGIiLCJjYWNoZWQiLCJEYXRhYmFzZSIsInJpZGxpc3RUZXh0IiwicmlkbGlzdCIsInJlcXVlc3RlZF90ZXh0c19zZXQiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsInJpZGxpc3RSZXNwb25zZSIsInNxbF9nZXRfcGFyYWxsZWxfdGV4dCIsImpvaW4iLCJhbGwiLCJlcnIiLCJyb3dzIiwiY29uc29sZSIsImxvZyIsImZvckVhY2giLCJyIiwicmlkIiwidGV4dCIsImNoYXB0ZXJUZXh0IiwicGFyYW1zIiwicmVxdWVzdGVkX3RleHRzIiwiU2V0IiwiaGFzIiwiYWRkIiwicmVmIiwicmVmZXJlbmNlIiwibWludiIsImJvb2siLCJjaGFwdGVyIiwibWF4diIsIkFycmF5IiwiZnJvbSIsImxlbmd0aCIsInYiLCJrIiwidGhlbiIsInRleHRzIiwiY2F0Y2giXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7OztBQUNBOzs7Ozs7QUFFQSxJQUFNQSxLQUFLLGlCQUFRQyxNQUFSLENBQWVDLFFBQWYsQ0FBd0Isb0JBQXhCLENBQVg7O0FBRUEsSUFBTUMsY0FBYyxTQUFkQSxXQUFjLENBQUNDLE9BQUQsRUFBVUMsbUJBQVYsRUFBa0M7QUFDckQsUUFBTyxJQUFJQyxPQUFKLENBQVksVUFBQ0MsT0FBRCxFQUFVQyxNQUFWLEVBQXFCO0FBQ3ZDLE1BQUlDLGtCQUFrQixFQUF0Qjs7QUFFQSxNQUFJQyx3QkFBd0IsOERBQThETixRQUFRTyxJQUFSLENBQWEsR0FBYixDQUE5RCxHQUFrRixHQUE5RztBQUNBWCxLQUFHWSxHQUFILENBQU9GLHFCQUFQLEVBQThCLFVBQUNHLEdBQUQsRUFBTUMsSUFBTixFQUFlO0FBQzVDLE9BQUlELEdBQUosRUFBUztBQUNSRSxZQUFRQyxHQUFSLENBQVlILEdBQVo7QUFDQUwsV0FBTywyQkFBUDtBQUNBO0FBQ0E7O0FBRURNLFFBQUtHLE9BQUwsQ0FBYSxhQUFLO0FBQ2pCUixvQkFBZ0JTLEVBQUVDLEdBQWxCLElBQXlCO0FBQ3hCLFlBQU9ELEVBQUVFO0FBRGUsS0FBekI7QUFHQSxJQUpEO0FBS0FiLFdBQVFFLGVBQVI7QUFDQSxHQWJEO0FBY0EsRUFsQk0sQ0FBUDtBQW9CQSxDQXJCRDs7QUF1QkEsSUFBTVksY0FBYyxTQUFkQSxXQUFjLENBQUNDLE1BQUQsRUFBWTtBQUMvQixLQUFJQyxrQkFBa0IsSUFBSUMsR0FBSixDQUFRRixPQUFPLE9BQVAsS0FBbUIsRUFBM0IsQ0FBdEI7QUFDQSxLQUFJLENBQUNDLGdCQUFnQkUsR0FBaEIsQ0FBb0IsS0FBcEIsQ0FBRCxJQUNGLENBQUNGLGdCQUFnQkUsR0FBaEIsQ0FBb0IsS0FBcEIsQ0FEQyxJQUVGLENBQUNGLGdCQUFnQkUsR0FBaEIsQ0FBb0IsS0FBcEIsQ0FGSCxFQUdDRixnQkFBZ0JHLEdBQWhCLENBQW9CLEtBQXBCOztBQUVELEtBQU1DLE1BQU1MLE9BQU9NLFNBQW5CO0FBQ0EsS0FBTUMsT0FBTyxxQkFBV0YsSUFBSUcsSUFBZixJQUF1QixRQUF2QixHQUFrQ0gsSUFBSUksT0FBSixHQUFjLElBQTdEO0FBQ0EsS0FBTUMsT0FBTyxxQkFBV0wsSUFBSUcsSUFBZixJQUF1QixRQUF2QixHQUFrQyxDQUFDSCxJQUFJSSxPQUFKLEdBQVksQ0FBYixJQUFrQixJQUFqRTtBQUNBLFFBQU8sSUFBSXpCLE9BQUosQ0FBWSxVQUFDQyxPQUFELEVBQVVDLE1BQVYsRUFBcUI7QUFDdkNMLGNBQVk4QixNQUFNQyxJQUFOLENBQVcsRUFBQ0MsUUFBUUgsT0FBS0gsSUFBZCxFQUFYLEVBQWdDLFVBQUNPLENBQUQsRUFBSUMsQ0FBSjtBQUFBLFVBQVVBLElBQUVSLElBQVo7QUFBQSxHQUFoQyxDQUFaLEVBQStETixlQUEvRCxFQUFnRmUsSUFBaEYsQ0FBcUYsVUFBQ0MsS0FBRCxFQUFXO0FBQy9GaEMsV0FBUTtBQUNQLGlCQUFhZSxPQUFPTSxTQURiO0FBRVAsWUFBUVc7QUFGRCxJQUFSO0FBSUEsR0FMRCxFQUtHQyxLQUxILENBS1MsVUFBQzNCLEdBQUQsRUFBUztBQUNqQkwsVUFBT0ssR0FBUDtBQUNBLEdBUEQ7QUFRQSxFQVRNLENBQVA7QUFVQSxDQXBCRDtRQXFCU1YsVyxHQUFBQSxXO1FBQWFrQixXLEdBQUFBLFciLCJmaWxlIjoiY2hhcHRlci10ZXh0LXNxbGl0ZTMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgYm9va19uYW1lcyBmcm9tICcuLi8uLi9kYXRhL2Jvb2tfbmFtZXMuanNvbidcbmltcG9ydCBzcWxpdGUzIGZyb20gJ3NxbGl0ZTMnXG5cbmNvbnN0IGRiID0gc3FsaXRlMy5jYWNoZWQuRGF0YWJhc2UoJ2RhdGEvdGV4dGZhYnJpYy5kYicpXG5cbmNvbnN0IHJpZGxpc3RUZXh0ID0gKHJpZGxpc3QsIHJlcXVlc3RlZF90ZXh0c19zZXQpID0+IHtcblx0cmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcblx0XHRsZXQgcmlkbGlzdFJlc3BvbnNlID0ge31cblxuXHRcdGxldCBzcWxfZ2V0X3BhcmFsbGVsX3RleHQgPSBcIlNFTEVDVCBgcmlkYCwgYHRleHRgIEZST00gYFBhcmFsbGVsVGV4dGAgV0hFUkUgYHJpZGAgSU4gKFwiICsgcmlkbGlzdC5qb2luKFwiLFwiKSArIFwiKVwiXG5cdFx0ZGIuYWxsKHNxbF9nZXRfcGFyYWxsZWxfdGV4dCwgKGVyciwgcm93cykgPT4ge1xuXHRcdFx0aWYgKGVycikge1xuXHRcdFx0XHRjb25zb2xlLmxvZyhlcnIpXG5cdFx0XHRcdHJlamVjdChcImZhaWx1cmUgb24gZGIuYWxsIHNxbGl0ZTNcIilcblx0XHRcdFx0cmV0dXJuXG5cdFx0XHR9XG5cblx0XHRcdHJvd3MuZm9yRWFjaChyID0+IHtcblx0XHRcdFx0cmlkbGlzdFJlc3BvbnNlW3IucmlkXSA9IHtcblx0XHRcdFx0XHRcIm5ldFwiOiByLnRleHRcblx0XHRcdFx0fVxuXHRcdFx0fSlcblx0XHRcdHJlc29sdmUocmlkbGlzdFJlc3BvbnNlKVxuXHRcdH0pXG5cdH0pXG5cbn1cblxuY29uc3QgY2hhcHRlclRleHQgPSAocGFyYW1zKSA9PiB7XG5cdGxldCByZXF1ZXN0ZWRfdGV4dHMgPSBuZXcgU2V0KHBhcmFtc1tcInRleHRzXCJdIHx8IFtdKVxuXHRpZiAoIXJlcXVlc3RlZF90ZXh0cy5oYXMoXCJ3bGNcIikgJiYgXG5cdFx0XHQhcmVxdWVzdGVkX3RleHRzLmhhcyhcIm5ldFwiKSAmJiBcblx0XHRcdCFyZXF1ZXN0ZWRfdGV4dHMuaGFzKFwibHh4XCIpKVxuXHRcdHJlcXVlc3RlZF90ZXh0cy5hZGQoXCJ3bGNcIilcblxuXHRjb25zdCByZWYgPSBwYXJhbXMucmVmZXJlbmNlXG5cdGNvbnN0IG1pbnYgPSBib29rX25hbWVzW3JlZi5ib29rXSAqIDEwMDAwMDAwICsgcmVmLmNoYXB0ZXIgKiAxMDAwXG5cdGNvbnN0IG1heHYgPSBib29rX25hbWVzW3JlZi5ib29rXSAqIDEwMDAwMDAwICsgKHJlZi5jaGFwdGVyKzEpICogMTAwMFxuXHRyZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuXHRcdHJpZGxpc3RUZXh0KEFycmF5LmZyb20oe2xlbmd0aDogbWF4di1taW52fSwgKHYsIGspID0+IGsrbWludiksIHJlcXVlc3RlZF90ZXh0cykudGhlbigodGV4dHMpID0+IHtcblx0XHRcdHJlc29sdmUoe1xuXHRcdFx0XHRcInJlZmVyZW5jZVwiOiBwYXJhbXMucmVmZXJlbmNlLFxuXHRcdFx0XHRcInRleHRcIjogdGV4dHNcblx0XHRcdH0pXG5cdFx0fSkuY2F0Y2goKGVycikgPT4ge1xuXHRcdFx0cmVqZWN0KGVycilcblx0XHR9KVxuXHR9KVxufVxuZXhwb3J0IHsgcmlkbGlzdFRleHQsIGNoYXB0ZXJUZXh0IH1cbiJdfQ==