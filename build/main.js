'use strict';

var _express = require('express');

var _express2 = _interopRequireDefault(_express);

var _compression = require('compression');

var _compression2 = _interopRequireDefault(_compression);

var _bodyParser = require('body-parser');

var _bodyParser2 = _interopRequireDefault(_bodyParser);

var _cors = require('cors');

var _cors2 = _interopRequireDefault(_cors);

var _chapterText = require('./api/chapter-text');

var _wordLookup = require('./api/word-lookup');

var _termSearch = require('./api/term-search');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var MongoClient = require('mongodb').MongoClient;


var things = {
	mongo: false,
	express: false
};
console.log("WAITING:", Object.keys(things).filter(function (k) {
	return things[k];
}));
var declare_ready = function declare_ready(thing) {
	console.log("READY:", thing);
	things[thing] = true;
	if (Object.keys(things).reduce(function (c, k) {
		return c && things[k];
	}, true)) {
		console.log("READY READY READY!");
	}
};

var mongoConnectionString = process.env.MONGO_CONNECTION_STRING;
var mongoDatabase = process.env.MONGO_DATABASE;
var mongoUrl = 'mongodb://' + mongoConnectionString + '/' + mongoDatabase;

var mongoConnection = null;
MongoClient.connect(mongoUrl, function (err, db) {
	if (err) {
		console.log("Error setting up mongo connection");
		console.log(err);
	} else {
		mongoConnection = db;
		declare_ready("mongo");
	}
});

var app = (0, _express2.default)();
app.use((0, _compression2.default)());
app.use(_bodyParser2.default.json());
app.use((0, _cors2.default)());
var port = +process.env.PORT || 3000;
var host = process.env.HOST || "127.0.0.1";
var server = app.listen(port, host, function () {
	console.log("Server listening to %s:%d within %s environment", host, port, app.get('env'));
	declare_ready("express");
});

console.log("Setting up routes");
app.post(['/api', '/api/*'], function (req, res) {
	var api_request = req.params;
	var params = req.body;
	console.log(api_request[0]);

	var responsePromise = new Promise(function (resolve, reject) {
		return resolve();
	});
	switch (api_request[0]) {
		case "term-search":
			responsePromise = (0, _termSearch.termSearch)(params, mongoConnection);
			break;
		case "collocation-search":
			responsePromise = (0, _termSearch.collocationSearch)(params);
			// response = termSearch(params) 
			break;
		case "word-study":
			// response = termSearch(params) 
			break;
		case "word-lookup":
			responsePromise = (0, _wordLookup.wordLookup)(params, mongoConnection);
			break;
		case "term-highlights":
			// response = termSearch(params) 
			break;
		case "chapter-text":
			responsePromise = (0, _chapterText.chapterText)(params, mongoConnection);
			break;
		default:
			responsePromise = new Promise(function (resolve, reject) {
				reject({
					"error": "Invalid api request. Request should be formatted /api/<type of request>",
					"options": ["term-search", "collocation-search", "word-study", "word-lookup", "term-highlights", "chapter-text"]
				});
			});
			break;
	}
	responsePromise.then(function (response) {
		res.send(response);
	}).catch(function (response) {
		res.send(response);
		console.log("error");
		console.log(response);
	});
});

var clientRoot = process.env.PARABIBLE_CLIENT_DIR;
var getUrl = function getUrl(mobile) {
	if (mobile) return '/mobile.html';else return '/index.html';
};
var needsFonts = function needsFonts(userAgent) {
	// technically this is not mobile - it's whether or not to dump fonts into the index.html
	var regexForMobile = {
		// Windows: /windows nt/i,
		WindowsPhone: /windows phone/i,
		// Mac: /macintosh/i,
		// Linux: /linux/i,
		Wii: /wii/i,
		Playstation: /playstation/i,
		iPad: /ipad/i,
		iPod: /ipod/i,
		iPhone: /iphone/i,
		Android: /android/i,
		Blackberry: /blackberry/i,
		Samsung: /samsung/i,
		// Curl: /curl/i
		Mobile: /mobile/i
	};
	return Object.keys(regexForMobile).reduce(function (a, k) {
		return a || regexForMobile[k].test(userAgent);
	}, false);
};

// Route order matters - the first listed will be invoked
app.get("/", function (req, res) {
	res.sendFile(getUrl(needsFonts(req.headers["user-agent"])), { root: clientRoot });
});
app.use(_express2.default.static(clientRoot));
app.get("*", function (req, res) {
	res.sendFile(getUrl(needsFonts(req.headers["user-agent"])), { root: clientRoot });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9tYWluLmpzIl0sIm5hbWVzIjpbIk1vbmdvQ2xpZW50IiwicmVxdWlyZSIsInRoaW5ncyIsIm1vbmdvIiwiZXhwcmVzcyIsImNvbnNvbGUiLCJsb2ciLCJPYmplY3QiLCJrZXlzIiwiZmlsdGVyIiwiayIsImRlY2xhcmVfcmVhZHkiLCJ0aGluZyIsInJlZHVjZSIsImMiLCJtb25nb0Nvbm5lY3Rpb25TdHJpbmciLCJwcm9jZXNzIiwiZW52IiwiTU9OR09fQ09OTkVDVElPTl9TVFJJTkciLCJtb25nb0RhdGFiYXNlIiwiTU9OR09fREFUQUJBU0UiLCJtb25nb1VybCIsIm1vbmdvQ29ubmVjdGlvbiIsImNvbm5lY3QiLCJlcnIiLCJkYiIsImFwcCIsInVzZSIsImpzb24iLCJwb3J0IiwiUE9SVCIsImhvc3QiLCJIT1NUIiwic2VydmVyIiwibGlzdGVuIiwiZ2V0IiwicG9zdCIsInJlcSIsInJlcyIsImFwaV9yZXF1ZXN0IiwicGFyYW1zIiwiYm9keSIsInJlc3BvbnNlUHJvbWlzZSIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwidGhlbiIsInJlc3BvbnNlIiwic2VuZCIsImNhdGNoIiwiY2xpZW50Um9vdCIsIlBBUkFCSUJMRV9DTElFTlRfRElSIiwiZ2V0VXJsIiwibW9iaWxlIiwibmVlZHNGb250cyIsInVzZXJBZ2VudCIsInJlZ2V4Rm9yTW9iaWxlIiwiV2luZG93c1Bob25lIiwiV2lpIiwiUGxheXN0YXRpb24iLCJpUGFkIiwiaVBvZCIsImlQaG9uZSIsIkFuZHJvaWQiLCJCbGFja2JlcnJ5IiwiU2Ftc3VuZyIsIk1vYmlsZSIsImEiLCJ0ZXN0Iiwic2VuZEZpbGUiLCJoZWFkZXJzIiwicm9vdCIsInN0YXRpYyJdLCJtYXBwaW5ncyI6Ijs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUVBOztBQUNBOztBQUNBOzs7O0FBUkEsSUFBSUEsY0FBY0MsUUFBUSxTQUFSLEVBQW1CRCxXQUFyQzs7O0FBVUEsSUFBSUUsU0FBUztBQUNaQyxRQUFPLEtBREs7QUFFWkMsVUFBUztBQUZHLENBQWI7QUFJQUMsUUFBUUMsR0FBUixDQUFZLFVBQVosRUFBd0JDLE9BQU9DLElBQVAsQ0FBWU4sTUFBWixFQUFvQk8sTUFBcEIsQ0FBMkI7QUFBQSxRQUFLUCxPQUFPUSxDQUFQLENBQUw7QUFBQSxDQUEzQixDQUF4QjtBQUNBLElBQU1DLGdCQUFnQixTQUFoQkEsYUFBZ0IsQ0FBQ0MsS0FBRCxFQUFXO0FBQ2hDUCxTQUFRQyxHQUFSLENBQVksUUFBWixFQUFzQk0sS0FBdEI7QUFDQVYsUUFBT1UsS0FBUCxJQUFnQixJQUFoQjtBQUNBLEtBQUlMLE9BQU9DLElBQVAsQ0FBWU4sTUFBWixFQUFvQlcsTUFBcEIsQ0FBMkIsVUFBQ0MsQ0FBRCxFQUFJSixDQUFKO0FBQUEsU0FBVUksS0FBS1osT0FBT1EsQ0FBUCxDQUFmO0FBQUEsRUFBM0IsRUFBcUQsSUFBckQsQ0FBSixFQUFnRTtBQUMvREwsVUFBUUMsR0FBUixDQUFZLG9CQUFaO0FBQ0E7QUFDRCxDQU5EOztBQVFBLElBQU1TLHdCQUF3QkMsUUFBUUMsR0FBUixDQUFZQyx1QkFBMUM7QUFDQSxJQUFNQyxnQkFBZ0JILFFBQVFDLEdBQVIsQ0FBWUcsY0FBbEM7QUFDQSxJQUFNQywwQkFBd0JOLHFCQUF4QixTQUFpREksYUFBdkQ7O0FBRUEsSUFBSUcsa0JBQWtCLElBQXRCO0FBQ0F0QixZQUFZdUIsT0FBWixDQUFvQkYsUUFBcEIsRUFBOEIsVUFBQ0csR0FBRCxFQUFNQyxFQUFOLEVBQWE7QUFDMUMsS0FBSUQsR0FBSixFQUFTO0FBQ1JuQixVQUFRQyxHQUFSLENBQVksbUNBQVo7QUFDQUQsVUFBUUMsR0FBUixDQUFZa0IsR0FBWjtBQUNBLEVBSEQsTUFJSztBQUNKRixvQkFBa0JHLEVBQWxCO0FBQ0FkLGdCQUFjLE9BQWQ7QUFDQTtBQUNELENBVEQ7O0FBV0EsSUFBSWUsTUFBTSx3QkFBVjtBQUNBQSxJQUFJQyxHQUFKLENBQVEsNEJBQVI7QUFDQUQsSUFBSUMsR0FBSixDQUFRLHFCQUFXQyxJQUFYLEVBQVI7QUFDQUYsSUFBSUMsR0FBSixDQUFRLHFCQUFSO0FBQ0EsSUFBSUUsT0FBTyxDQUFDYixRQUFRQyxHQUFSLENBQVlhLElBQWIsSUFBcUIsSUFBaEM7QUFDQSxJQUFJQyxPQUFPZixRQUFRQyxHQUFSLENBQVllLElBQVosSUFBb0IsV0FBL0I7QUFDQSxJQUFJQyxTQUFTUCxJQUFJUSxNQUFKLENBQVdMLElBQVgsRUFBaUJFLElBQWpCLEVBQXVCLFlBQU07QUFDekMxQixTQUFRQyxHQUFSLENBQVksaURBQVosRUFBK0R5QixJQUEvRCxFQUFxRUYsSUFBckUsRUFBMkVILElBQUlTLEdBQUosQ0FBUSxLQUFSLENBQTNFO0FBQ0F4QixlQUFjLFNBQWQ7QUFDQSxDQUhZLENBQWI7O0FBT0FOLFFBQVFDLEdBQVIsQ0FBWSxtQkFBWjtBQUNBb0IsSUFBSVUsSUFBSixDQUFTLENBQUMsTUFBRCxFQUFTLFFBQVQsQ0FBVCxFQUE2QixVQUFDQyxHQUFELEVBQU1DLEdBQU4sRUFBYztBQUMxQyxLQUFNQyxjQUFjRixJQUFJRyxNQUF4QjtBQUNBLEtBQU1BLFNBQVNILElBQUlJLElBQW5CO0FBQ0FwQyxTQUFRQyxHQUFSLENBQVlpQyxZQUFZLENBQVosQ0FBWjs7QUFFQSxLQUFJRyxrQkFBa0IsSUFBSUMsT0FBSixDQUFZLFVBQUNDLE9BQUQsRUFBVUMsTUFBVjtBQUFBLFNBQXFCRCxTQUFyQjtBQUFBLEVBQVosQ0FBdEI7QUFDQSxTQUFPTCxZQUFZLENBQVosQ0FBUDtBQUNDLE9BQUssYUFBTDtBQUNDRyxxQkFBa0IsNEJBQVdGLE1BQVgsRUFBbUJsQixlQUFuQixDQUFsQjtBQUNBO0FBQ0QsT0FBSyxvQkFBTDtBQUNDb0IscUJBQWtCLG1DQUFrQkYsTUFBbEIsQ0FBbEI7QUFDQTtBQUNBO0FBQ0QsT0FBSyxZQUFMO0FBQ0M7QUFDQTtBQUNELE9BQUssYUFBTDtBQUNDRSxxQkFBa0IsNEJBQVdGLE1BQVgsRUFBbUJsQixlQUFuQixDQUFsQjtBQUNBO0FBQ0QsT0FBSyxpQkFBTDtBQUNDO0FBQ0E7QUFDRCxPQUFLLGNBQUw7QUFDQ29CLHFCQUFrQiw4QkFBWUYsTUFBWixFQUFvQmxCLGVBQXBCLENBQWxCO0FBQ0E7QUFDRDtBQUNDb0IscUJBQWtCLElBQUlDLE9BQUosQ0FBWSxVQUFDQyxPQUFELEVBQVVDLE1BQVYsRUFBcUI7QUFDbERBLFdBQU87QUFDTixjQUFTLHlFQURIO0FBRU4sZ0JBQVcsQ0FDVixhQURVLEVBRVYsb0JBRlUsRUFHVixZQUhVLEVBSVYsYUFKVSxFQUtWLGlCQUxVLEVBTVYsY0FOVTtBQUZMLEtBQVA7QUFXQSxJQVppQixDQUFsQjtBQWFBO0FBbENGO0FBb0NBSCxpQkFBZ0JJLElBQWhCLENBQXFCLFVBQUNDLFFBQUQsRUFBYztBQUNsQ1QsTUFBSVUsSUFBSixDQUFTRCxRQUFUO0FBQ0EsRUFGRCxFQUVHRSxLQUZILENBRVMsVUFBQ0YsUUFBRCxFQUFjO0FBQ3RCVCxNQUFJVSxJQUFKLENBQVNELFFBQVQ7QUFDQTFDLFVBQVFDLEdBQVIsQ0FBWSxPQUFaO0FBQ0FELFVBQVFDLEdBQVIsQ0FBWXlDLFFBQVo7QUFDQSxFQU5EO0FBT0EsQ0FqREQ7O0FBb0RBLElBQU1HLGFBQWFsQyxRQUFRQyxHQUFSLENBQVlrQyxvQkFBL0I7QUFDQSxJQUFNQyxTQUFTLFNBQVRBLE1BQVMsQ0FBQ0MsTUFBRCxFQUFZO0FBQzFCLEtBQUlBLE1BQUosRUFDQyxPQUFPLGNBQVAsQ0FERCxLQUdDLE9BQU8sYUFBUDtBQUNELENBTEQ7QUFNQSxJQUFNQyxhQUFhLFNBQWJBLFVBQWEsQ0FBQ0MsU0FBRCxFQUFlO0FBQ2pDO0FBQ0EsS0FBTUMsaUJBQWlCO0FBQ3RCO0FBQ0FDLGdCQUFjLGdCQUZRO0FBR3RCO0FBQ0E7QUFDQUMsT0FBSyxNQUxpQjtBQU10QkMsZUFBYSxjQU5TO0FBT3RCQyxRQUFNLE9BUGdCO0FBUXRCQyxRQUFNLE9BUmdCO0FBU3RCQyxVQUFRLFNBVGM7QUFVdEJDLFdBQVMsVUFWYTtBQVd0QkMsY0FBWSxhQVhVO0FBWXRCQyxXQUFTLFVBWmE7QUFhdEI7QUFDQUMsVUFBUTtBQWRjLEVBQXZCO0FBZ0JBLFFBQU8zRCxPQUFPQyxJQUFQLENBQVlnRCxjQUFaLEVBQTRCM0MsTUFBNUIsQ0FBbUMsVUFBQ3NELENBQUQsRUFBSXpELENBQUo7QUFBQSxTQUN6Q3lELEtBQUtYLGVBQWU5QyxDQUFmLEVBQWtCMEQsSUFBbEIsQ0FBdUJiLFNBQXZCLENBRG9DO0FBQUEsRUFBbkMsRUFFUCxLQUZPLENBQVA7QUFHQSxDQXJCRDs7QUF1QkE7QUFDQTdCLElBQUlTLEdBQUosQ0FBUSxHQUFSLEVBQWEsVUFBQ0UsR0FBRCxFQUFNQyxHQUFOLEVBQWM7QUFDMUJBLEtBQUkrQixRQUFKLENBQWFqQixPQUFPRSxXQUFXakIsSUFBSWlDLE9BQUosQ0FBWSxZQUFaLENBQVgsQ0FBUCxDQUFiLEVBQTRELEVBQUNDLE1BQU1yQixVQUFQLEVBQTVEO0FBQ0EsQ0FGRDtBQUdBeEIsSUFBSUMsR0FBSixDQUFRLGtCQUFRNkMsTUFBUixDQUFldEIsVUFBZixDQUFSO0FBQ0F4QixJQUFJUyxHQUFKLENBQVEsR0FBUixFQUFhLFVBQUNFLEdBQUQsRUFBTUMsR0FBTixFQUFjO0FBQzFCQSxLQUFJK0IsUUFBSixDQUFhakIsT0FBT0UsV0FBV2pCLElBQUlpQyxPQUFKLENBQVksWUFBWixDQUFYLENBQVAsQ0FBYixFQUE0RCxFQUFDQyxNQUFNckIsVUFBUCxFQUE1RDtBQUNBLENBRkQiLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBNb25nb0NsaWVudCA9IHJlcXVpcmUoJ21vbmdvZGInKS5Nb25nb0NsaWVudFxuaW1wb3J0IGV4cHJlc3MgZnJvbSAnZXhwcmVzcydcbmltcG9ydCBjb21wcmVzc2lvbiBmcm9tICdjb21wcmVzc2lvbidcbmltcG9ydCBib2R5UGFyc2VyIGZyb20gJ2JvZHktcGFyc2VyJ1xuaW1wb3J0IGNvcnMgZnJvbSAnY29ycydcblxuaW1wb3J0IHsgY2hhcHRlclRleHQgfSBmcm9tIFwiLi9hcGkvY2hhcHRlci10ZXh0XCJcbmltcG9ydCB7IHdvcmRMb29rdXAgfSBmcm9tIFwiLi9hcGkvd29yZC1sb29rdXBcIlxuaW1wb3J0IHsgdGVybVNlYXJjaCwgY29sbG9jYXRpb25TZWFyY2ggfSBmcm9tIFwiLi9hcGkvdGVybS1zZWFyY2hcIlxuXG5sZXQgdGhpbmdzID0ge1xuXHRtb25nbzogZmFsc2UsXG5cdGV4cHJlc3M6IGZhbHNlXG59XG5jb25zb2xlLmxvZyhcIldBSVRJTkc6XCIsIE9iamVjdC5rZXlzKHRoaW5ncykuZmlsdGVyKGsgPT4gdGhpbmdzW2tdKSlcbmNvbnN0IGRlY2xhcmVfcmVhZHkgPSAodGhpbmcpID0+IHtcblx0Y29uc29sZS5sb2coXCJSRUFEWTpcIiwgdGhpbmcpXG5cdHRoaW5nc1t0aGluZ10gPSB0cnVlXG5cdGlmIChPYmplY3Qua2V5cyh0aGluZ3MpLnJlZHVjZSgoYywgaykgPT4gYyAmJiB0aGluZ3Nba10sIHRydWUpKSB7XG5cdFx0Y29uc29sZS5sb2coXCJSRUFEWSBSRUFEWSBSRUFEWSFcIilcblx0fVxufVxuXG5jb25zdCBtb25nb0Nvbm5lY3Rpb25TdHJpbmcgPSBwcm9jZXNzLmVudi5NT05HT19DT05ORUNUSU9OX1NUUklOR1xuY29uc3QgbW9uZ29EYXRhYmFzZSA9IHByb2Nlc3MuZW52Lk1PTkdPX0RBVEFCQVNFXG5jb25zdCBtb25nb1VybCA9IGBtb25nb2RiOi8vJHttb25nb0Nvbm5lY3Rpb25TdHJpbmd9LyR7bW9uZ29EYXRhYmFzZX1gXG5cbmxldCBtb25nb0Nvbm5lY3Rpb24gPSBudWxsO1xuTW9uZ29DbGllbnQuY29ubmVjdChtb25nb1VybCwgKGVyciwgZGIpID0+IHtcblx0aWYgKGVycikge1xuXHRcdGNvbnNvbGUubG9nKFwiRXJyb3Igc2V0dGluZyB1cCBtb25nbyBjb25uZWN0aW9uXCIpXG5cdFx0Y29uc29sZS5sb2coZXJyKVxuXHR9XG5cdGVsc2Uge1xuXHRcdG1vbmdvQ29ubmVjdGlvbiA9IGRiXG5cdFx0ZGVjbGFyZV9yZWFkeShcIm1vbmdvXCIpXG5cdH1cbn0pXG5cbmxldCBhcHAgPSBleHByZXNzKClcbmFwcC51c2UoY29tcHJlc3Npb24oKSlcbmFwcC51c2UoYm9keVBhcnNlci5qc29uKCkpXG5hcHAudXNlKGNvcnMoKSlcbmxldCBwb3J0ID0gK3Byb2Nlc3MuZW52LlBPUlQgfHwgMzAwMFxubGV0IGhvc3QgPSBwcm9jZXNzLmVudi5IT1NUIHx8IFwiMTI3LjAuMC4xXCJcbmxldCBzZXJ2ZXIgPSBhcHAubGlzdGVuKHBvcnQsIGhvc3QsICgpID0+IHtcblx0Y29uc29sZS5sb2coXCJTZXJ2ZXIgbGlzdGVuaW5nIHRvICVzOiVkIHdpdGhpbiAlcyBlbnZpcm9ubWVudFwiLCBob3N0LCBwb3J0LCBhcHAuZ2V0KCdlbnYnKSlcblx0ZGVjbGFyZV9yZWFkeShcImV4cHJlc3NcIilcbn0pXG5cblxuXG5jb25zb2xlLmxvZyhcIlNldHRpbmcgdXAgcm91dGVzXCIpXG5hcHAucG9zdChbJy9hcGknLCAnL2FwaS8qJ10sIChyZXEsIHJlcykgPT4ge1xuXHRjb25zdCBhcGlfcmVxdWVzdCA9IHJlcS5wYXJhbXNcblx0Y29uc3QgcGFyYW1zID0gcmVxLmJvZHlcblx0Y29uc29sZS5sb2coYXBpX3JlcXVlc3RbMF0pXG5cblx0bGV0IHJlc3BvbnNlUHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHJlc29sdmUoKSlcblx0c3dpdGNoKGFwaV9yZXF1ZXN0WzBdKSB7XG5cdFx0Y2FzZSBcInRlcm0tc2VhcmNoXCI6XG5cdFx0XHRyZXNwb25zZVByb21pc2UgPSB0ZXJtU2VhcmNoKHBhcmFtcywgbW9uZ29Db25uZWN0aW9uKVxuXHRcdFx0YnJlYWtcblx0XHRjYXNlIFwiY29sbG9jYXRpb24tc2VhcmNoXCI6XG5cdFx0XHRyZXNwb25zZVByb21pc2UgPSBjb2xsb2NhdGlvblNlYXJjaChwYXJhbXMpXG5cdFx0XHQvLyByZXNwb25zZSA9IHRlcm1TZWFyY2gocGFyYW1zKSBcblx0XHRcdGJyZWFrXG5cdFx0Y2FzZSBcIndvcmQtc3R1ZHlcIjpcblx0XHRcdC8vIHJlc3BvbnNlID0gdGVybVNlYXJjaChwYXJhbXMpIFxuXHRcdFx0YnJlYWtcblx0XHRjYXNlIFwid29yZC1sb29rdXBcIjpcblx0XHRcdHJlc3BvbnNlUHJvbWlzZSA9IHdvcmRMb29rdXAocGFyYW1zLCBtb25nb0Nvbm5lY3Rpb24pIFxuXHRcdFx0YnJlYWtcblx0XHRjYXNlIFwidGVybS1oaWdobGlnaHRzXCI6XG5cdFx0XHQvLyByZXNwb25zZSA9IHRlcm1TZWFyY2gocGFyYW1zKSBcblx0XHRcdGJyZWFrXG5cdFx0Y2FzZSBcImNoYXB0ZXItdGV4dFwiOlxuXHRcdFx0cmVzcG9uc2VQcm9taXNlID0gY2hhcHRlclRleHQocGFyYW1zLCBtb25nb0Nvbm5lY3Rpb24pXG5cdFx0XHRicmVha1xuXHRcdGRlZmF1bHQ6XG5cdFx0XHRyZXNwb25zZVByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG5cdFx0XHRcdHJlamVjdCh7XG5cdFx0XHRcdFx0XCJlcnJvclwiOiBcIkludmFsaWQgYXBpIHJlcXVlc3QuIFJlcXVlc3Qgc2hvdWxkIGJlIGZvcm1hdHRlZCAvYXBpLzx0eXBlIG9mIHJlcXVlc3Q+XCIsXG5cdFx0XHRcdFx0XCJvcHRpb25zXCI6IFtcblx0XHRcdFx0XHRcdFwidGVybS1zZWFyY2hcIixcblx0XHRcdFx0XHRcdFwiY29sbG9jYXRpb24tc2VhcmNoXCIsXG5cdFx0XHRcdFx0XHRcIndvcmQtc3R1ZHlcIixcblx0XHRcdFx0XHRcdFwid29yZC1sb29rdXBcIixcblx0XHRcdFx0XHRcdFwidGVybS1oaWdobGlnaHRzXCIsXG5cdFx0XHRcdFx0XHRcImNoYXB0ZXItdGV4dFwiXG5cdFx0XHRcdFx0XVxuXHRcdFx0XHR9KVxuXHRcdFx0fSlcblx0XHRcdGJyZWFrXG5cdH1cblx0cmVzcG9uc2VQcm9taXNlLnRoZW4oKHJlc3BvbnNlKSA9PiB7XG5cdFx0cmVzLnNlbmQocmVzcG9uc2UpXG5cdH0pLmNhdGNoKChyZXNwb25zZSkgPT4ge1xuXHRcdHJlcy5zZW5kKHJlc3BvbnNlKVxuXHRcdGNvbnNvbGUubG9nKFwiZXJyb3JcIilcblx0XHRjb25zb2xlLmxvZyhyZXNwb25zZSlcblx0fSlcbn0pXG5cblxuY29uc3QgY2xpZW50Um9vdCA9IHByb2Nlc3MuZW52LlBBUkFCSUJMRV9DTElFTlRfRElSXG5jb25zdCBnZXRVcmwgPSAobW9iaWxlKSA9PiB7XG5cdGlmIChtb2JpbGUpXG5cdFx0cmV0dXJuICcvbW9iaWxlLmh0bWwnXG5cdGVsc2Vcblx0XHRyZXR1cm4gJy9pbmRleC5odG1sJ1xufVxuY29uc3QgbmVlZHNGb250cyA9ICh1c2VyQWdlbnQpID0+IHtcblx0Ly8gdGVjaG5pY2FsbHkgdGhpcyBpcyBub3QgbW9iaWxlIC0gaXQncyB3aGV0aGVyIG9yIG5vdCB0byBkdW1wIGZvbnRzIGludG8gdGhlIGluZGV4Lmh0bWxcblx0Y29uc3QgcmVnZXhGb3JNb2JpbGUgPSB7XG5cdFx0Ly8gV2luZG93czogL3dpbmRvd3MgbnQvaSxcblx0XHRXaW5kb3dzUGhvbmU6IC93aW5kb3dzIHBob25lL2ksXG5cdFx0Ly8gTWFjOiAvbWFjaW50b3NoL2ksXG5cdFx0Ly8gTGludXg6IC9saW51eC9pLFxuXHRcdFdpaTogL3dpaS9pLFxuXHRcdFBsYXlzdGF0aW9uOiAvcGxheXN0YXRpb24vaSxcblx0XHRpUGFkOiAvaXBhZC9pLFxuXHRcdGlQb2Q6IC9pcG9kL2ksXG5cdFx0aVBob25lOiAvaXBob25lL2ksXG5cdFx0QW5kcm9pZDogL2FuZHJvaWQvaSxcblx0XHRCbGFja2JlcnJ5OiAvYmxhY2tiZXJyeS9pLFxuXHRcdFNhbXN1bmc6IC9zYW1zdW5nL2ksXG5cdFx0Ly8gQ3VybDogL2N1cmwvaVxuXHRcdE1vYmlsZTogL21vYmlsZS9pXG5cdH1cblx0cmV0dXJuIE9iamVjdC5rZXlzKHJlZ2V4Rm9yTW9iaWxlKS5yZWR1Y2UoKGEsIGspID0+XG5cdFx0YSB8fCByZWdleEZvck1vYmlsZVtrXS50ZXN0KHVzZXJBZ2VudCksXG5cdGZhbHNlKVxufVxuXG4vLyBSb3V0ZSBvcmRlciBtYXR0ZXJzIC0gdGhlIGZpcnN0IGxpc3RlZCB3aWxsIGJlIGludm9rZWRcbmFwcC5nZXQoXCIvXCIsIChyZXEsIHJlcykgPT4ge1xuXHRyZXMuc2VuZEZpbGUoZ2V0VXJsKG5lZWRzRm9udHMocmVxLmhlYWRlcnNbXCJ1c2VyLWFnZW50XCJdKSksIHtyb290OiBjbGllbnRSb290fSlcbn0pXG5hcHAudXNlKGV4cHJlc3Muc3RhdGljKGNsaWVudFJvb3QpKVxuYXBwLmdldChcIipcIiwgKHJlcSwgcmVzKSA9PiB7XG5cdHJlcy5zZW5kRmlsZShnZXRVcmwobmVlZHNGb250cyhyZXEuaGVhZGVyc1tcInVzZXItYWdlbnRcIl0pKSwge3Jvb3Q6IGNsaWVudFJvb3R9KVxufSkiXX0=