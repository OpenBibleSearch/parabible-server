'use strict';

var _express = require('express');

var _express2 = _interopRequireDefault(_express);

var _compression = require('compression');

var _compression2 = _interopRequireDefault(_compression);

var _bodyParser = require('body-parser');

var _bodyParser2 = _interopRequireDefault(_bodyParser);

var _cors = require('cors');

var _cors2 = _interopRequireDefault(_cors);

var _chapterText = require('./api/chapter-text');

var _wordLookup = require('./api/word-lookup');

var _termSearch = require('./api/term-search');

var _logging = require('./util/logging');

var _logging2 = _interopRequireDefault(_logging);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var MongoClient = require('mongodb').MongoClient;


var things = {
	mongo: false,
	express: false
};
console.log("WAITING:", Object.keys(things));
var declare_ready = function declare_ready(thing) {
	console.log("READY:", thing);
	things[thing] = true;
	if (Object.keys(things).reduce(function (c, k) {
		return c && things[k];
	}, true)) {
		console.log("READY READY READY!");
	}
};

var requiredEnvVar = function requiredEnvVar(variable) {
	if (!process.env.hasOwnProperty(variable)) {
		console.log('Sorry, we need "' + variable + '" to be set');
		process.exit();
	}
	return process.env[variable];
};

// const mongoConnectionString = requiredEnvVar("MONGO_CONNECTION_STRING")
var mongouser = requiredEnvVar("MONGODB_USER");
var mongoPass = requiredEnvVar("MONGODB_PASSWORD");
var mongoDatabase = requiredEnvVar("MONGO_DATABASE");
var mongoService = requiredEnvVar("DATABASE_SERVICE_NAME");
var mongoUrl = 'mongodb://' + mongouser + ':' + mongoPass + '@' + mongoService + '/' + mongoDatabase;

var mongoConnection = null;
MongoClient.connect(mongoUrl, function (err, db) {
	if (err) {
		console.log("Error setting up mongo connection");
		console.log(err);
	} else {
		mongoConnection = db;
		declare_ready("mongo");
	}
});

var app = (0, _express2.default)();
app.use((0, _compression2.default)());
app.use(_bodyParser2.default.json());
app.use((0, _cors2.default)());
var port = +requiredEnvVar("APP_HOST");
var host = requiredEnvVar("APP_PORT");
var server = app.listen(port, host, function () {
	console.log("Server listening to %s:%d within %s environment", host, port, app.get('env'));
	declare_ready("express");
});

// Use X-Forwarded-For
app.set('trust proxy', 'loopback');

console.log("Setting up routes");
app.post(['/api', '/api/*'], function (req, res) {
	var api_request = req.params;
	var params = req.body;
	console.log(api_request[0]);
	(0, _logging2.default)({ api_request: api_request, params: params, ip_address: req.ip });

	var responsePromise = new Promise(function (resolve, reject) {
		return resolve();
	});
	switch (api_request[0]) {
		case "term-search":
			responsePromise = (0, _termSearch.termSearch)(params, mongoConnection);
			break;
		case "collocation-search":
			responsePromise = (0, _termSearch.collocationSearch)(params);
			// response = termSearch(params) 
			break;
		case "word-study":
			// response = termSearch(params) 
			break;
		case "word-lookup":
			responsePromise = (0, _wordLookup.wordLookup)(params, mongoConnection);
			break;
		case "term-highlights":
			// response = termSearch(params) 
			break;
		case "chapter-text":
			responsePromise = (0, _chapterText.chapterText)(params, mongoConnection);
			break;
		default:
			responsePromise = new Promise(function (resolve, reject) {
				reject({
					"error": "Invalid api request. Request should be formatted /api/<type of request>",
					"options": ["term-search", "collocation-search", "word-study", "word-lookup", "term-highlights", "chapter-text"]
				});
			});
			break;
	}
	responsePromise.then(function (response) {
		res.send(response);
	}).catch(function (response) {
		res.send(response);
		console.log("error");
		console.log(response);
	});
});

// const clientRoot = "./client/build"
// const clientRoot = requiredEnvVar("PARABIBLE_CLIENT_DIR")
var getUrl = function getUrl(mobile) {
	if (mobile) return '/mobile.html';else return '/index.html';
};
var needsFonts = function needsFonts(userAgent) {
	// technically this is not mobile - it's whether or not to dump fonts into the index.html
	var regexForMobile = {
		// Windows: /windows nt/i,
		WindowsPhone: /windows phone/i,
		// Mac: /macintosh/i,
		// Linux: /linux/i,
		Wii: /wii/i,
		Playstation: /playstation/i,
		iPad: /ipad/i,
		iPod: /ipod/i,
		iPhone: /iphone/i,
		Android: /android/i,
		Blackberry: /blackberry/i,
		Samsung: /samsung/i,
		// Curl: /curl/i
		Mobile: /mobile/i
	};
	return Object.keys(regexForMobile).reduce(function (a, k) {
		return a || regexForMobile[k].test(userAgent);
	}, false);
};

// Route order matters - the first listed will be invoked
// app.get("/", (req, res) => {
// 	res.sendFile(getUrl(needsFonts(req.headers["user-agent"])), {root: clientRoot})
// })
// app.use(express.static(clientRoot))
// app.get("*", (req, res) => {
// 	res.sendFile(getUrl(needsFonts(req.headers["user-agent"])), {root: clientRoot})
// })
//# sourceMappingURL=data:application/json;charset=utf-8;base64,