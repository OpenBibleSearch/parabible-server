'use strict';

var _express = require('express');

var _express2 = _interopRequireDefault(_express);

var _compression = require('compression');

var _compression2 = _interopRequireDefault(_compression);

var _bodyParser = require('body-parser');

var _bodyParser2 = _interopRequireDefault(_bodyParser);

var _cors = require('cors');

var _cors2 = _interopRequireDefault(_cors);

var _chapterText = require('./api/chapter-text');

var _wordLookup = require('./api/word-lookup');

var _termSearch = require('./api/term-search');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var MongoClient = require('mongodb').MongoClient;

// ssl: http://blog.ayanray.com/2015/06/adding-https-ssl-to-express-4-x-applications/

var things = {
	mongo: false,
	express: false
};
console.log("WAITING:", Object.keys(things).filter(function (k) {
	return things[k];
}));
var declare_ready = function declare_ready(thing) {
	console.log("READY:", thing);
	things[thing] = true;
	if (Object.keys(things).reduce(function (c, k) {
		return c && things[k];
	}, true)) {
		console.log("READY READY READY!");
	}
};

// const url = 'mongodb://localhost:27017/parabible'
var url = 'mongodb://gcpadmin:thisisaninsecurepassword@127.0.0.1:27017/parabible';
var mongoConnection = null;
MongoClient.connect(url, function (err, db) {
	mongoConnection = db;
	declare_ready("mongo");
});

var app = (0, _express2.default)();
app.use((0, _compression2.default)());
app.use(_bodyParser2.default.json());
app.use((0, _cors2.default)());
var port = +process.env.PORT || 3000;
var host = process.env.HOST || "127.0.0.1";
var server = app.listen(port, host, function () {
	console.log("Server listening to %s:%d within %s environment", host, port, app.get('env'));
	declare_ready("express");
});

console.log("Setting up routes");
app.post(['/api', '/api/*'], function (req, res) {
	var api_request = req.params;
	var params = req.body;
	console.log(api_request[0]);

	var responsePromise = new Promise(function (resolve, reject) {
		return resolve();
	});
	switch (api_request[0]) {
		case "term-search":
			responsePromise = (0, _termSearch.termSearch)(params, mongoConnection);
			break;
		case "collocation-search":
			responsePromise = (0, _termSearch.collocationSearch)(params);
			// response = termSearch(params) 
			break;
		case "word-study":
			// response = termSearch(params) 
			break;
		case "word-lookup":
			responsePromise = (0, _wordLookup.wordLookup)(params, mongoConnection);
			break;
		case "term-highlights":
			// response = termSearch(params) 
			break;
		case "chapter-text":
			console.log(params);
			responsePromise = (0, _chapterText.chapterText)(params, mongoConnection);
			break;
		default:
			responsePromise = new Promise(function (resolve, reject) {
				reject({
					"error": "Invalid api request. Request should be formatted /api/<type of request>",
					"options": ["term-search", "collocation-search", "word-study", "word-lookup", "term-highlights", "chapter-text"]
				});
			});
			break;
	}
	responsePromise.then(function (response) {
		res.send(response);
	}).catch(function (response) {
		res.send(response);
		console.log("error");
		console.log(response);
	});
});

app.use(_express2.default.static('client/build'));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9tYWluLmpzIl0sIm5hbWVzIjpbIk1vbmdvQ2xpZW50IiwicmVxdWlyZSIsInRoaW5ncyIsIm1vbmdvIiwiZXhwcmVzcyIsImNvbnNvbGUiLCJsb2ciLCJPYmplY3QiLCJrZXlzIiwiZmlsdGVyIiwiayIsImRlY2xhcmVfcmVhZHkiLCJ0aGluZyIsInJlZHVjZSIsImMiLCJ1cmwiLCJtb25nb0Nvbm5lY3Rpb24iLCJjb25uZWN0IiwiZXJyIiwiZGIiLCJhcHAiLCJ1c2UiLCJqc29uIiwicG9ydCIsInByb2Nlc3MiLCJlbnYiLCJQT1JUIiwiaG9zdCIsIkhPU1QiLCJzZXJ2ZXIiLCJsaXN0ZW4iLCJnZXQiLCJwb3N0IiwicmVxIiwicmVzIiwiYXBpX3JlcXVlc3QiLCJwYXJhbXMiLCJib2R5IiwicmVzcG9uc2VQcm9taXNlIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJ0aGVuIiwicmVzcG9uc2UiLCJzZW5kIiwiY2F0Y2giLCJzdGF0aWMiXSwibWFwcGluZ3MiOiI7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFJQTs7QUFDQTs7QUFDQTs7OztBQVZBLElBQUlBLGNBQWNDLFFBQVEsU0FBUixFQUFtQkQsV0FBckM7O0FBTUE7O0FBTUEsSUFBSUUsU0FBUztBQUNaQyxRQUFPLEtBREs7QUFFWkMsVUFBUztBQUZHLENBQWI7QUFJQUMsUUFBUUMsR0FBUixDQUFZLFVBQVosRUFBd0JDLE9BQU9DLElBQVAsQ0FBWU4sTUFBWixFQUFvQk8sTUFBcEIsQ0FBMkI7QUFBQSxRQUFLUCxPQUFPUSxDQUFQLENBQUw7QUFBQSxDQUEzQixDQUF4QjtBQUNBLElBQU1DLGdCQUFnQixTQUFoQkEsYUFBZ0IsQ0FBQ0MsS0FBRCxFQUFXO0FBQ2hDUCxTQUFRQyxHQUFSLENBQVksUUFBWixFQUFzQk0sS0FBdEI7QUFDQVYsUUFBT1UsS0FBUCxJQUFnQixJQUFoQjtBQUNBLEtBQUlMLE9BQU9DLElBQVAsQ0FBWU4sTUFBWixFQUFvQlcsTUFB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O0FBb0RBdkIsSUFBSUMsR0FBSixDQUFRLGtCQUFReUIsTUFBUixDQUFlLGNBQWYsQ0FBUiIsImZpbGUiOiJtYWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIE1vbmdvQ2xpZW50ID0gcmVxdWlyZSgnbW9uZ29kYicpLk1vbmdvQ2xpZW50XG5pbXBvcnQgZXhwcmVzcyBmcm9tICdleHByZXNzJ1xuaW1wb3J0IGNvbXByZXNzaW9uIGZyb20gJ2NvbXByZXNzaW9uJ1xuaW1wb3J0IGJvZHlQYXJzZXIgZnJvbSAnYm9keS1wYXJzZXInXG5pbXBvcnQgY29ycyBmcm9tICdjb3JzJ1xuXG4vLyBzc2w6IGh0dHA6Ly9ibG9nLmF5YW5yYXkuY29tLzIwMTUvMDYvYWRkaW5nLWh0dHBzLXNzbC10by1leHByZXNzLTQteC1hcHBsaWNhdGlvbnMvXG5cbmltcG9ydCB7IGNoYXB0ZXJUZXh0IH0gZnJvbSBcIi4vYXBpL2NoYXB0ZXItdGV4dFwiXG5pbXBvcnQgeyB3b3JkTG9va3VwIH0gZnJvbSBcIi4vYXBpL3dvcmQtbG9va3VwXCJcbmltcG9ydCB7IHRlcm1TZWFyY2gsIGNvbGxvY2F0aW9uU2VhcmNoIH0gZnJvbSBcIi4vYXBpL3Rlcm0tc2VhcmNoXCJcblxubGV0IHRoaW5ncyA9IHtcblx0bW9uZ286IGZhbHNlLFxuXHRleHByZXNzOiBmYWxzZVxufVxuY29uc29sZS5sb2coXCJXQUlUSU5HOlwiLCBPYmplY3Qua2V5cyh0aGluZ3MpLmZpbHRlcihrID0+IHRoaW5nc1trXSkpXG5jb25zdCBkZWNsYXJlX3JlYWR5ID0gKHRoaW5nKSA9PiB7XG5cdGNvbnNvbGUubG9nKFwiUkVBRFk6XCIsIHRoaW5nKVxuXHR0aGluZ3NbdGhpbmddID0gdHJ1ZVxuXHRpZiAoT2JqZWN0LmtleXModGhpbmdzKS5yZWR1Y2UoKGMsIGspID0+IGMgJiYgdGhpbmdzW2tdLCB0cnVlKSkge1xuXHRcdGNvbnNvbGUubG9nKFwiUkVBRFkgUkVBRFkgUkVBRFkhXCIpXG5cdH1cbn1cblxuLy8gY29uc3QgdXJsID0gJ21vbmdvZGI6Ly9sb2NhbGhvc3Q6MjcwMTcvcGFyYWJpYmxlJ1xuY29uc3QgdXJsID0gJ21vbmdvZGI6Ly9nY3BhZG1pbjp0aGlzaXNhbmluc2VjdXJlcGFzc3dvcmRAMTI3LjAuMC4xOjI3MDE3L3BhcmFiaWJsZSdcbmxldCBtb25nb0Nvbm5lY3Rpb24gPSBudWxsO1xuTW9uZ29DbGllbnQuY29ubmVjdCh1cmwsIChlcnIsIGRiKSA9PiB7XG5cdG1vbmdvQ29ubmVjdGlvbiA9IGRiXG5cdGRlY2xhcmVfcmVhZHkoXCJtb25nb1wiKVxufSlcblxubGV0IGFwcCA9IGV4cHJlc3MoKVxuYXBwLnVzZShjb21wcmVzc2lvbigpKVxuYXBwLnVzZShib2R5UGFyc2VyLmpzb24oKSlcbmFwcC51c2UoY29ycygpKVxubGV0IHBvcnQgPSArcHJvY2Vzcy5lbnYuUE9SVCB8fCAzMDAwXG5sZXQgaG9zdCA9IHByb2Nlc3MuZW52LkhPU1QgfHwgXCIxMjcuMC4wLjFcIlxubGV0IHNlcnZlciA9IGFwcC5saXN0ZW4ocG9ydCwgaG9zdCwgKCkgPT4ge1xuXHRjb25zb2xlLmxvZyhcIlNlcnZlciBsaXN0ZW5pbmcgdG8gJXM6JWQgd2l0aGluICVzIGVudmlyb25tZW50XCIsIGhvc3QsIHBvcnQsIGFwcC5nZXQoJ2VudicpKVxuXHRkZWNsYXJlX3JlYWR5KFwiZXhwcmVzc1wiKVxufSlcblxuXG5cbmNvbnNvbGUubG9nKFwiU2V0dGluZyB1cCByb3V0ZXNcIilcbmFwcC5wb3N0KFsnL2FwaScsICcvYXBpLyonXSwgKHJlcSwgcmVzKSA9PiB7XG5cdGNvbnN0IGFwaV9yZXF1ZXN0ID0gcmVxLnBhcmFtc1xuXHRjb25zdCBwYXJhbXMgPSByZXEuYm9keVxuXHRjb25zb2xlLmxvZyhhcGlfcmVxdWVzdFswXSlcblxuXHRsZXQgcmVzcG9uc2VQcm9taXNlID0gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4gcmVzb2x2ZSgpKVxuXHRzd2l0Y2goYXBpX3JlcXVlc3RbMF0pIHtcblx0XHRjYXNlIFwidGVybS1zZWFyY2hcIjpcblx0XHRcdHJlc3BvbnNlUHJvbWlzZSA9IHRlcm1TZWFyY2gocGFyYW1zLCBtb25nb0Nvbm5lY3Rpb24pXG5cdFx0XHRicmVha1xuXHRcdGNhc2UgXCJjb2xsb2NhdGlvbi1zZWFyY2hcIjpcblx0XHRcdHJlc3BvbnNlUHJvbWlzZSA9IGNvbGxvY2F0aW9uU2VhcmNoKHBhcmFtcylcblx0XHRcdC8vIHJlc3BvbnNlID0gdGVybVNlYXJjaChwYXJhbXMpIFxuXHRcdFx0YnJlYWtcblx0XHRjYXNlIFwid29yZC1zdHVkeVwiOlxuXHRcdFx0Ly8gcmVzcG9uc2UgPSB0ZXJtU2VhcmNoKHBhcmFtcykgXG5cdFx0XHRicmVha1xuXHRcdGNhc2UgXCJ3b3JkLWxvb2t1cFwiOlxuXHRcdFx0cmVzcG9uc2VQcm9taXNlID0gd29yZExvb2t1cChwYXJhbXMsIG1vbmdvQ29ubmVjdGlvbikgXG5cdFx0XHRicmVha1xuXHRcdGNhc2UgXCJ0ZXJtLWhpZ2hsaWdodHNcIjpcblx0XHRcdC8vIHJlc3BvbnNlID0gdGVybVNlYXJjaChwYXJhbXMpIFxuXHRcdFx0YnJlYWtcblx0XHRjYXNlIFwiY2hhcHRlci10ZXh0XCI6XG5cdFx0Y29uc29sZS5sb2cocGFyYW1zKVxuXHRcdFx0cmVzcG9uc2VQcm9taXNlID0gY2hhcHRlclRleHQocGFyYW1zLCBtb25nb0Nvbm5lY3Rpb24pXG5cdFx0XHRicmVha1xuXHRcdGRlZmF1bHQ6XG5cdFx0XHRyZXNwb25zZVByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG5cdFx0XHRcdHJlamVjdCh7XG5cdFx0XHRcdFx0XCJlcnJvclwiOiBcIkludmFsaWQgYXBpIHJlcXVlc3QuIFJlcXVlc3Qgc2hvdWxkIGJlIGZvcm1hdHRlZCAvYXBpLzx0eXBlIG9mIHJlcXVlc3Q+XCIsXG5cdFx0XHRcdFx0XCJvcHRpb25zXCI6IFtcblx0XHRcdFx0XHRcdFwidGVybS1zZWFyY2hcIixcblx0XHRcdFx0XHRcdFwiY29sbG9jYXRpb24tc2VhcmNoXCIsXG5cdFx0XHRcdFx0XHRcIndvcmQtc3R1ZHlcIixcblx0XHRcdFx0XHRcdFwid29yZC1sb29rdXBcIixcblx0XHRcdFx0XHRcdFwidGVybS1oaWdobGlnaHRzXCIsXG5cdFx0XHRcdFx0XHRcImNoYXB0ZXItdGV4dFwiXG5cdFx0XHRcdFx0XVxuXHRcdFx0XHR9KVxuXHRcdFx0fSlcblx0XHRcdGJyZWFrXG5cdH1cblx0cmVzcG9uc2VQcm9taXNlLnRoZW4oKHJlc3BvbnNlKSA9PiB7XG5cdFx0cmVzLnNlbmQocmVzcG9uc2UpXG5cdH0pLmNhdGNoKChyZXNwb25zZSkgPT4ge1xuXHRcdHJlcy5zZW5kKHJlc3BvbnNlKVxuXHRcdGNvbnNvbGUubG9nKFwiZXJyb3JcIilcblx0XHRjb25zb2xlLmxvZyhyZXNwb25zZSlcblx0fSlcbn0pXG5cbmFwcC51c2UoZXhwcmVzcy5zdGF0aWMoJ2NsaWVudC9idWlsZCcpKSJdfQ==