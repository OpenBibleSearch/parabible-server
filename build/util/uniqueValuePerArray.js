"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});
var removeValue = function removeValue(value) {
	return function (array_to_purge) {
		var to_return = array_to_purge.slice();
		var index = to_return.indexOf(value);
		if (index > -1) to_return.splice(index, 1);
		return to_return;
	};
};

var fastConcatArrays = function fastConcatArrays(arrays) {
	// Can be done like this: [].concat(...arrays) but it's slightly slower
	var result = [];
	for (var i = 0; i < arrays.length; i++) {
		var a = arrays[i];
		for (var j = 0; j < a.length; j++) {
			result.push(a[j]);
		}
	}
	return result;
};
var trimArrayBySize = function trimArrayBySize(arraysSortedBySize) {
	// If arrays.length >= arrays[-1].length then arrays[-1]
	// can satisfy the uniqueness requirement so we can ignore in tests
	if (arraysSortedBySize.length === 0) {
		return arraysSortedBySize;
	} else if (arraysSortedBySize[arraysSortedBySize.length - 1].length >= arraysSortedBySize.length) {
		arraysSortedBySize.pop();
		return trimArrayBySize(arraysSortedBySize);
	} else {
		return arraysSortedBySize;
	}
};
var bruteForceUniques = function bruteForceUniques(arrays) {
	if (arrays.length === 1) {
		return arrays[0].length > 0;
	} else {
		var array_slice = arrays.slice(1);
		for (var i in arrays[0]) {
			var test_value = arrays[0][i];
			var trial_array = array_slice.map(removeValue(test_value));
			var trial = bruteForceUniques(trial_array);
			if (trial !== false) {
				return true;
			}
		}
		return false;
	}
};
var uniqueValuePerArray = function uniqueValuePerArray(arrays) {
	if (arrays.length === 1) {
		return arrays[0].length > 0;
	} else {
		var sortedArrays = arrays.slice().sort(function (a, b) {
			return a.length > b.length;
		});
		var trimmedArrays = trimArrayBySize(sortedArrays);
		if (trimmedArrays.length === 0) {
			//The arrays have enough matches to guarantee a possible combination
			return true;
		} else if (trimmedArrays.length === 1) {
			// Only one array remains - if this array has any values, it is possible, otherwise it's not - this array should definitely have a length > 0
			return trimmedArrays[0].length > 0;
		}
		// if the union of the arrays is not >= the number of arrays in the set,
		// there's no way for each to have a unique value assigned
		var uniqueSet = new Set(fastConcatArrays(trimmedArrays));
		if (uniqueSet.size < trimmedArrays.length) return false;
		return bruteForceUniques(trimmedArrays);
	}
};

exports.uniqueValuePerArray = uniqueValuePerArray;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsL3VuaXF1ZVZhbHVlUGVyQXJyYXkuanMiXSwibmFtZXMiOlsicmVtb3ZlVmFsdWUiLCJ2YWx1ZSIsImFycmF5X3RvX3B1cmdlIiwidG9fcmV0dXJuIiwic2xpY2UiLCJpbmRleCIsImluZGV4T2YiLCJzcGxpY2UiLCJmYXN0Q29uY2F0QXJyYXlzIiwiYXJyYXlzIiwicmVzdWx0IiwiaSIsImxlbmd0aCIsImEiLCJqIiwicHVzaCIsInRyaW1BcnJheUJ5U2l6ZSIsImFycmF5c1NvcnRlZEJ5U2l6ZSIsInBvcCIsImJydXRlRm9yY2VVbmlxdWVzIiwiYXJyYXlfc2xpY2UiLCJ0ZXN0X3ZhbHVlIiwidHJpYWxfYXJyYXkiLCJtYXAiLCJ0cmlhbCIsInVuaXF1ZVZhbHVlUGVyQXJyYXkiLCJzb3J0ZWRBcnJheXMiLCJzb3J0IiwiYiIsInRyaW1tZWRBcnJheXMiLCJ1bmlxdWVTZXQiLCJTZXQiLCJzaXplIl0sIm1hcHBpbmdzIjoiOzs7OztBQUFBLElBQU1BLGNBQWMsU0FBZEEsV0FBYyxDQUFDQyxLQUFELEVBQVc7QUFDOUIsUUFBTyxVQUFDQyxjQUFELEVBQW9CO0FBQzFCLE1BQU1DLFlBQVlELGVBQWVFLEtBQWYsRUFBbEI7QUFDQSxNQUFNQyxRQUFRRixVQUFVRyxPQUFWLENBQWtCTCxLQUFsQixDQUFkO0FBQ0EsTUFBSUksUUFBUSxDQUFDLENBQWIsRUFDQ0YsVUFBVUksTUFBVixDQUFpQkYsS0FBakIsRUFBd0IsQ0FBeEI7QUFDRCxTQUFPRixTQUFQO0FBQ0EsRUFORDtBQU9BLENBUkQ7O0FBVUEsSUFBTUssbUJBQW1CLFNBQW5CQSxnQkFBbUIsQ0FBQ0MsTUFBRCxFQUFZO0FBQ3BDO0FBQ0EsS0FBSUMsU0FBUyxFQUFiO0FBQ0EsTUFBSyxJQUFJQyxJQUFJLENBQWIsRUFBZ0JBLElBQUlGLE9BQU9HLE1BQTNCLEVBQW1DRCxHQUFuQyxFQUF3QztBQUN2QyxNQUFNRSxJQUFJSixPQUFPRSxDQUFQLENBQVY7QUFDQSxPQUFJLElBQUlHLElBQUksQ0FBWixFQUFlQSxJQUFJRCxFQUFFRCxNQUFyQixFQUE2QkUsR0FBN0I7QUFDQ0osVUFBT0ssSUFBUCxDQUFZRixFQUFFQyxDQUFGLENBQVo7QUFERDtBQUVBO0FBQ0QsUUFBT0osTUFBUDtBQUNBLENBVEQ7QUFVQSxJQUFNTSxrQkFBa0IsU0FBbEJBLGVBQWtCLENBQUNDLGtCQUFELEVBQXdCO0FBQy9DO0FBQ0E7QUFDQSxLQUFJQSxtQkFBbUJMLE1BQW5CLEtBQThCLENBQWxDLEVBQXFDO0FBQ3BDLFNBQU9LLGtCQUFQO0FBQ0EsRUFGRCxNQUdLLElBQUlBLG1CQUFtQkEsbUJBQW1CTCxNQUFuQixHQUE0QixDQUEvQyxFQUFrREEsTUFBbEQsSUFBNERLLG1CQUFtQkwsTUFBbkYsRUFBMkY7QUFDL0ZLLHFCQUFtQkMsR0FBbkI7QUFDQSxTQUFPRixnQkFBZ0JDLGtCQUFoQixDQUFQO0FBQ0EsRUFISSxNQUlBO0FBQ0osU0FBT0Esa0JBQVA7QUFDQTtBQUNELENBYkQ7QUFjQSxJQUFNRSxvQkFBb0IsU0FBcEJBLGlCQUFvQixDQUFDVixNQUFELEVBQVk7QUFDckMsS0FBSUEsT0FBT0csTUFBUCxLQUFrQixDQUF0QixFQUF5QjtBQUN4QixTQUFPSCxPQUFPLENBQVAsRUFBVUcsTUFBVixHQUFtQixDQUExQjtBQUNBLEVBRkQsTUFHSztBQUNKLE1BQU1RLGNBQWNYLE9BQU9MLEtBQVAsQ0FBYSxDQUFiLENBQXBCO0FBQ0EsT0FBSyxJQUFJTyxDQUFULElBQWNGLE9BQU8sQ0FBUCxDQUFkLEVBQXlCO0FBQ3hCLE9BQU1ZLGFBQWFaLE9BQU8sQ0FBUCxFQUFVRSxDQUFWLENBQW5CO0FBQ0EsT0FBTVcsY0FBY0YsWUFBWUcsR0FBWixDQUFnQnZCLFlBQVlxQixVQUFaLENBQWhCLENBQXBCO0FBQ0EsT0FBTUcsUUFBUUwsa0JBQWtCRyxXQUFsQixDQUFkO0FBQ0EsT0FBSUUsVUFBVSxLQUFkLEVBQXFCO0FBQ3BCLFdBQU8sSUFBUDtBQUNBO0FBQ0Q7QUFDRCxTQUFPLEtBQVA7QUFDQTtBQUNELENBaEJEO0FBaUJBLElBQU1DLHNCQUFzQixTQUF0QkEsbUJBQXNCLENBQUNoQixNQUFELEVBQVk7QUFDdkMsS0FBSUEsT0FBT0csTUFBUCxLQUFrQixDQUF0QixFQUF5QjtBQUN4QixTQUFPSCxPQUFPLENBQVAsRUFBVUcsTUFBVixHQUFtQixDQUExQjtBQUNBLEVBRkQsTUFHSztBQUNKLE1BQU1jLGVBQWVqQixPQUFPTCxLQUFQLEdBQWV1QixJQUFmLENBQW9CLFVBQUNkLENBQUQsRUFBSWUsQ0FBSjtBQUFBLFVBQVVmLEVBQUVELE1BQUYsR0FBV2dCLEVBQUVoQixNQUF2QjtBQUFBLEdBQXBCLENBQXJCO0FBQ0EsTUFBTWlCLGdCQUFnQmIsZ0JBQWdCVSxZQUFoQixDQUF0QjtBQUNBLE1BQUlHLGNBQWNqQixNQUFkLEtBQXlCLENBQTdCLEVBQWdDO0FBQy9CO0FBQ0EsVUFBTyxJQUFQO0FBQ0EsR0FIRCxNQUlLLElBQUlpQixjQUFjakIsTUFBZCxLQUF5QixDQUE3QixFQUFnQztBQUNwQztBQUNBLFVBQU9pQixjQUFjLENBQWQsRUFBaUJqQixNQUFqQixHQUEwQixDQUFqQztBQUNBO0FBQ0Q7QUFDQTtBQUNBLE1BQU1rQixZQUFZLElBQUlDLEdBQUosQ0FBUXZCLGlCQUFpQnFCLGFBQWpCLENBQVIsQ0FBbEI7QUFDQSxNQUFJQyxVQUFVRSxJQUFWLEdBQWlCSCxjQUFjakIsTUFBbkMsRUFDQyxPQUFPLEtBQVA7QUFDRCxTQUFPTyxrQkFBa0JVLGFBQWxCLENBQVA7QUFDQTtBQUNELENBdEJEOztRQXdCU0osbUIsR0FBQUEsbUIiLCJmaWxlIjoidW5pcXVlVmFsdWVQZXJBcnJheS5qcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHJlbW92ZVZhbHVlID0gKHZhbHVlKSA9PiB7XG5cdHJldHVybiAoYXJyYXlfdG9fcHVyZ2UpID0+IHtcblx0XHRjb25zdCB0b19yZXR1cm4gPSBhcnJheV90b19wdXJnZS5zbGljZSgpXG5cdFx0Y29uc3QgaW5kZXggPSB0b19yZXR1cm4uaW5kZXhPZih2YWx1ZSlcblx0XHRpZiAoaW5kZXggPiAtMSlcblx0XHRcdHRvX3JldHVybi5zcGxpY2UoaW5kZXgsIDEpXG5cdFx0cmV0dXJuIHRvX3JldHVyblxuXHR9XG59XG5cbmNvbnN0IGZhc3RDb25jYXRBcnJheXMgPSAoYXJyYXlzKSA9PiB7XG5cdC8vIENhbiBiZSBkb25lIGxpa2UgdGhpczogW10uY29uY2F0KC4uLmFycmF5cykgYnV0IGl0J3Mgc2xpZ2h0bHkgc2xvd2VyXG5cdGxldCByZXN1bHQgPSBbXVxuXHRmb3IgKGxldCBpID0gMDsgaSA8IGFycmF5cy5sZW5ndGg7IGkrKykge1xuXHRcdGNvbnN0IGEgPSBhcnJheXNbaV1cblx0XHRmb3IodmFyIGogPSAwOyBqIDwgYS5sZW5ndGg7IGorKylcblx0XHRcdHJlc3VsdC5wdXNoKGFbal0pXG5cdH1cblx0cmV0dXJuIHJlc3VsdFxufVxuY29uc3QgdHJpbUFycmF5QnlTaXplID0gKGFycmF5c1NvcnRlZEJ5U2l6ZSkgPT4ge1xuXHQvLyBJZiBhcnJheXMubGVuZ3RoID49IGFycmF5c1stMV0ubGVuZ3RoIHRoZW4gYXJyYXlzWy0xXVxuXHQvLyBjYW4gc2F0aXNmeSB0aGUgdW5pcXVlbmVzcyByZXF1aXJlbWVudCBzbyB3ZSBjYW4gaWdub3JlIGluIHRlc3RzXG5cdGlmIChhcnJheXNTb3J0ZWRCeVNpemUubGVuZ3RoID09PSAwKSB7XG5cdFx0cmV0dXJuIGFycmF5c1NvcnRlZEJ5U2l6ZVxuXHR9XG5cdGVsc2UgaWYgKGFycmF5c1NvcnRlZEJ5U2l6ZVthcnJheXNTb3J0ZWRCeVNpemUubGVuZ3RoIC0gMV0ubGVuZ3RoID49IGFycmF5c1NvcnRlZEJ5U2l6ZS5sZW5ndGgpIHtcblx0XHRhcnJheXNTb3J0ZWRCeVNpemUucG9wKClcblx0XHRyZXR1cm4gdHJpbUFycmF5QnlTaXplKGFycmF5c1NvcnRlZEJ5U2l6ZSlcblx0fVxuXHRlbHNlIHtcblx0XHRyZXR1cm4gYXJyYXlzU29ydGVkQnlTaXplXG5cdH1cbn1cbmNvbnN0IGJydXRlRm9yY2VVbmlxdWVzID0gKGFycmF5cykgPT4ge1xuXHRpZiAoYXJyYXlzLmxlbmd0aCA9PT0gMSkge1xuXHRcdHJldHVybiBhcnJheXNbMF0ubGVuZ3RoID4gMFxuXHR9XG5cdGVsc2Uge1xuXHRcdGNvbnN0IGFycmF5X3NsaWNlID0gYXJyYXlzLnNsaWNlKDEpXG5cdFx0Zm9yIChsZXQgaSBpbiBhcnJheXNbMF0pIHtcblx0XHRcdGNvbnN0IHRlc3RfdmFsdWUgPSBhcnJheXNbMF1baV1cblx0XHRcdGNvbnN0IHRyaWFsX2FycmF5ID0gYXJyYXlfc2xpY2UubWFwKHJlbW92ZVZhbHVlKHRlc3RfdmFsdWUpKVxuXHRcdFx0Y29uc3QgdHJpYWwgPSBicnV0ZUZvcmNlVW5pcXVlcyh0cmlhbF9hcnJheSlcblx0XHRcdGlmICh0cmlhbCAhPT0gZmFsc2UpIHtcblx0XHRcdFx0cmV0dXJuIHRydWVcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIGZhbHNlXG5cdH1cbn1cbmNvbnN0IHVuaXF1ZVZhbHVlUGVyQXJyYXkgPSAoYXJyYXlzKSA9PiB7XG5cdGlmIChhcnJheXMubGVuZ3RoID09PSAxKSB7XG5cdFx0cmV0dXJuIGFycmF5c1swXS5sZW5ndGggPiAwXG5cdH1cblx0ZWxzZSB7XG5cdFx0Y29uc3Qgc29ydGVkQXJyYXlzID0gYXJyYXlzLnNsaWNlKCkuc29ydCgoYSwgYikgPT4gYS5sZW5ndGggPiBiLmxlbmd0aClcblx0XHRjb25zdCB0cmltbWVkQXJyYXlzID0gdHJpbUFycmF5QnlTaXplKHNvcnRlZEFycmF5cylcblx0XHRpZiAodHJpbW1lZEFycmF5cy5sZW5ndGggPT09IDApIHtcblx0XHRcdC8vVGhlIGFycmF5cyBoYXZlIGVub3VnaCBtYXRjaGVzIHRvIGd1YXJhbnRlZSBhIHBvc3NpYmxlIGNvbWJpbmF0aW9uXG5cdFx0XHRyZXR1cm4gdHJ1ZVxuXHRcdH1cblx0XHRlbHNlIGlmICh0cmltbWVkQXJyYXlzLmxlbmd0aCA9PT0gMSkge1xuXHRcdFx0Ly8gT25seSBvbmUgYXJyYXkgcmVtYWlucyAtIGlmIHRoaXMgYXJyYXkgaGFzIGFueSB2YWx1ZXMsIGl0IGlzIHBvc3NpYmxlLCBvdGhlcndpc2UgaXQncyBub3QgLSB0aGlzIGFycmF5IHNob3VsZCBkZWZpbml0ZWx5IGhhdmUgYSBsZW5ndGggPiAwXG5cdFx0XHRyZXR1cm4gdHJpbW1lZEFycmF5c1swXS5sZW5ndGggPiAwXG5cdFx0fVxuXHRcdC8vIGlmIHRoZSB1bmlvbiBvZiB0aGUgYXJyYXlzIGlzIG5vdCA+PSB0aGUgbnVtYmVyIG9mIGFycmF5cyBpbiB0aGUgc2V0LFxuXHRcdC8vIHRoZXJlJ3Mgbm8gd2F5IGZvciBlYWNoIHRvIGhhdmUgYSB1bmlxdWUgdmFsdWUgYXNzaWduZWRcblx0XHRjb25zdCB1bmlxdWVTZXQgPSBuZXcgU2V0KGZhc3RDb25jYXRBcnJheXModHJpbW1lZEFycmF5cykpXG5cdFx0aWYgKHVuaXF1ZVNldC5zaXplIDwgdHJpbW1lZEFycmF5cy5sZW5ndGgpXG5cdFx0XHRyZXR1cm4gZmFsc2Vcblx0XHRyZXR1cm4gYnJ1dGVGb3JjZVVuaXF1ZXModHJpbW1lZEFycmF5cylcblx0fVxufVxuXG5leHBvcnQgeyB1bmlxdWVWYWx1ZVBlckFycmF5IH0iXX0=